// Code generated by protoc-gen-gogo.
// source: openstack/data.proto
// DO NOT EDIT!

/*
	Package echopb_openstack is a generated protocol buffer package.

	It is generated from these files:
		openstack/data.proto
		openstack/image.proto

	It has these top-level messages:
		IdNamePair
		NetworkDiscoveryReqRespData
		SubnetDiscoveryReqRespData
		NetworkTopologyReqRespData
		ImageDiscoveryReqRespData
		FlavorDiscoveryReqRespData
		MachineSpawnsReqRespData
		MachineDiscoveryReqRespData
		MachineDestroyReqRespData
		MachineRebootReqRespData
		Flavor
		OpenstackNovaBootReqRespData
		SecGroupInfo
		IfaceInfo
		GatewayInfo
		OpenstackNeutronLandscapeReqRespData
		OpenstackNeutronNetRequestData
		OpenstackNeutronNetResponseData
		ConsoleResourceRequestData
		ConsoleResourceResponseData
		TraineeDroneRequestData
		TraineeDroneResponseData
		DefensiveDroneRequestData
		DefensiveDroneResponseData
		TokenReqRespData
		LibvirtDomainInfo
		LibvirtDomainReqRespData
		PhsicalLayerInfo
		LinkLayerInfo
		NetLayerInfo
		TransLayerInfo
		InternetModel
		OSILayersReqRespData
		Image
*/
package echopb_openstack

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import echopb_openstack_neutron "github.com/tangfeixiong/go-to-openstack-bootcamp/kopos/echopb/openstack/neutron"
import echopb_openstack_nova "github.com/tangfeixiong/go-to-openstack-bootcamp/kopos/echopb/openstack/nova"
import echopb_openstack_identity "github.com/tangfeixiong/go-to-openstack-bootcamp/kopos/echopb/openstack/identity"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type IdNamePair struct {
	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *IdNamePair) Reset()                    { *m = IdNamePair{} }
func (m *IdNamePair) String() string            { return proto.CompactTextString(m) }
func (*IdNamePair) ProtoMessage()               {}
func (*IdNamePair) Descriptor() ([]byte, []int) { return fileDescriptorData, []int{0} }

func (m *IdNamePair) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *IdNamePair) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Network data structure, as input/output argument
//
// status: means 'ACTIVE', ...
// networks: return value, all of networks information
type NetworkDiscoveryReqRespData struct {
	Status   string                              `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Networks []*echopb_openstack_neutron.Network `protobuf:"bytes,2,rep,name=networks" json:"networks,omitempty"`
}

func (m *NetworkDiscoveryReqRespData) Reset()                    { *m = NetworkDiscoveryReqRespData{} }
func (m *NetworkDiscoveryReqRespData) String() string            { return proto.CompactTextString(m) }
func (*NetworkDiscoveryReqRespData) ProtoMessage()               {}
func (*NetworkDiscoveryReqRespData) Descriptor() ([]byte, []int) { return fileDescriptorData, []int{1} }

func (m *NetworkDiscoveryReqRespData) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *NetworkDiscoveryReqRespData) GetNetworks() []*echopb_openstack_neutron.Network {
	if m != nil {
		return m.Networks
	}
	return nil
}

// Subnet data structure, as input/output argument
//
// network_id: search condition
// subnets: return value, all of subnets information
type SubnetDiscoveryReqRespData struct {
	NetworkId string                             `protobuf:"bytes,1,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	Subnets   []*echopb_openstack_neutron.Subnet `protobuf:"bytes,2,rep,name=subnets" json:"subnets,omitempty"`
}

func (m *SubnetDiscoveryReqRespData) Reset()                    { *m = SubnetDiscoveryReqRespData{} }
func (m *SubnetDiscoveryReqRespData) String() string            { return proto.CompactTextString(m) }
func (*SubnetDiscoveryReqRespData) ProtoMessage()               {}
func (*SubnetDiscoveryReqRespData) Descriptor() ([]byte, []int) { return fileDescriptorData, []int{2} }

func (m *SubnetDiscoveryReqRespData) GetNetworkId() string {
	if m != nil {
		return m.NetworkId
	}
	return ""
}

func (m *SubnetDiscoveryReqRespData) GetSubnets() []*echopb_openstack_neutron.Subnet {
	if m != nil {
		return m.Subnets
	}
	return nil
}

// Network data structure, as input/output argument
//
// networks: argument, list of network (id or name)
// networks: return value, all of networks information
type NetworkTopologyReqRespData struct {
	FloatingNetworkId string                                  `protobuf:"bytes,1,opt,name=floating_network_id,json=floatingNetworkId,proto3" json:"floating_network_id,omitempty"`
	Information       []*OpenstackNeutronLandscapeReqRespData `protobuf:"bytes,2,rep,name=information" json:"information,omitempty"`
}

func (m *NetworkTopologyReqRespData) Reset()                    { *m = NetworkTopologyReqRespData{} }
func (m *NetworkTopologyReqRespData) String() string            { return proto.CompactTextString(m) }
func (*NetworkTopologyReqRespData) ProtoMessage()               {}
func (*NetworkTopologyReqRespData) Descriptor() ([]byte, []int) { return fileDescriptorData, []int{3} }

func (m *NetworkTopologyReqRespData) GetFloatingNetworkId() string {
	if m != nil {
		return m.FloatingNetworkId
	}
	return ""
}

func (m *NetworkTopologyReqRespData) GetInformation() []*OpenstackNeutronLandscapeReqRespData {
	if m != nil {
		return m.Information
	}
	return nil
}

// Image data structure, as input/output argument
//
// status: means 'queued', 'saving', 'active', ...
// visibility: means 'public', 'shared', 'community', ...
// member_status: means 'accepted', 'all', ...
// images: return value, all of images Information
type ImageDiscoveryReqRespData struct {
	Status       string   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Visibility   string   `protobuf:"bytes,2,opt,name=visibility,proto3" json:"visibility,omitempty"`
	MemberStatus string   `protobuf:"bytes,3,opt,name=member_status,json=memberStatus,proto3" json:"member_status,omitempty"`
	Images       []*Image `protobuf:"bytes,4,rep,name=images" json:"images,omitempty"`
}

func (m *ImageDiscoveryReqRespData) Reset()                    { *m = ImageDiscoveryReqRespData{} }
func (m *ImageDiscoveryReqRespData) String() string            { return proto.CompactTextString(m) }
func (*ImageDiscoveryReqRespData) ProtoMessage()               {}
func (*ImageDiscoveryReqRespData) Descriptor() ([]byte, []int) { return fileDescriptorData, []int{4} }

func (m *ImageDiscoveryReqRespData) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *ImageDiscoveryReqRespData) GetVisibility() string {
	if m != nil {
		return m.Visibility
	}
	return ""
}

func (m *ImageDiscoveryReqRespData) GetMemberStatus() string {
	if m != nil {
		return m.MemberStatus
	}
	return ""
}

func (m *ImageDiscoveryReqRespData) GetImages() []*Image {
	if m != nil {
		return m.Images
	}
	return nil
}

// Flavor data structure, as input/output argument
//
// access_type: means 'public', ...
// flavors: return value, all of flavors information
type FlavorDiscoveryReqRespData struct {
	AccessType string                          `protobuf:"bytes,1,opt,name=access_type,json=accessType,proto3" json:"access_type,omitempty"`
	Flavors    []*echopb_openstack_nova.Flavor `protobuf:"bytes,2,rep,name=flavors" json:"flavors,omitempty"`
}

func (m *FlavorDiscoveryReqRespData) Reset()                    { *m = FlavorDiscoveryReqRespData{} }
func (m *FlavorDiscoveryReqRespData) String() string            { return proto.CompactTextString(m) }
func (*FlavorDiscoveryReqRespData) ProtoMessage()               {}
func (*FlavorDiscoveryReqRespData) Descriptor() ([]byte, []int) { return fileDescriptorData, []int{5} }

func (m *FlavorDiscoveryReqRespData) GetAccessType() string {
	if m != nil {
		return m.AccessType
	}
	return ""
}

func (m *FlavorDiscoveryReqRespData) GetFlavors() []*echopb_openstack_nova.Flavor {
	if m != nil {
		return m.Flavors
	}
	return nil
}

// Machine data structure, as input/output argument
//
// OpenstackNovaBootReqRespData: see definition of "OpenstackNovaBootReqRespData"
type MachineSpawnsReqRespData struct {
	Vms []*OpenstackNovaBootReqRespData `protobuf:"bytes,1,rep,name=vms" json:"vms,omitempty"`
}

func (m *MachineSpawnsReqRespData) Reset()                    { *m = MachineSpawnsReqRespData{} }
func (m *MachineSpawnsReqRespData) String() string            { return proto.CompactTextString(m) }
func (*MachineSpawnsReqRespData) ProtoMessage()               {}
func (*MachineSpawnsReqRespData) Descriptor() ([]byte, []int) { return fileDescriptorData, []int{6} }

func (m *MachineSpawnsReqRespData) GetVms() []*OpenstackNovaBootReqRespData {
	if m != nil {
		return m.Vms
	}
	return nil
}

// Machine data structure, as input/output argument
//
// status: means 'ACTIVE', ...
// flavors: return value, all of flavors information
type MachineDiscoveryReqRespData struct {
	Status string                          `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Vms    []*echopb_openstack_nova.Server `protobuf:"bytes,2,rep,name=vms" json:"vms,omitempty"`
}

func (m *MachineDiscoveryReqRespData) Reset()                    { *m = MachineDiscoveryReqRespData{} }
func (m *MachineDiscoveryReqRespData) String() string            { return proto.CompactTextString(m) }
func (*MachineDiscoveryReqRespData) ProtoMessage()               {}
func (*MachineDiscoveryReqRespData) Descriptor() ([]byte, []int) { return fileDescriptorData, []int{7} }

func (m *MachineDiscoveryReqRespData) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *MachineDiscoveryReqRespData) GetVms() []*echopb_openstack_nova.Server {
	if m != nil {
		return m.Vms
	}
	return nil
}

// Machine data structure, as input/output argument
//
// id: required if name is empty
// name: required if id is empty
// state_: return value
type MachineDestroyReqRespData struct {
	Vms          []*IdNamePair `protobuf:"bytes,1,rep,name=vms" json:"vms,omitempty"`
	StateCode    int32         `protobuf:"varint,2,opt,name=state_code,json=stateCode,proto3" json:"state_code,omitempty"`
	StateMessage string        `protobuf:"bytes,3,opt,name=state_message,json=stateMessage,proto3" json:"state_message,omitempty"`
}

func (m *MachineDestroyReqRespData) Reset()                    { *m = MachineDestroyReqRespData{} }
func (m *MachineDestroyReqRespData) String() string            { return proto.CompactTextString(m) }
func (*MachineDestroyReqRespData) ProtoMessage()               {}
func (*MachineDestroyReqRespData) Descriptor() ([]byte, []int) { return fileDescriptorData, []int{8} }

func (m *MachineDestroyReqRespData) GetVms() []*IdNamePair {
	if m != nil {
		return m.Vms
	}
	return nil
}

func (m *MachineDestroyReqRespData) GetStateCode() int32 {
	if m != nil {
		return m.StateCode
	}
	return 0
}

func (m *MachineDestroyReqRespData) GetStateMessage() string {
	if m != nil {
		return m.StateMessage
	}
	return ""
}

// Machine data structure, as input/output argument
//
// id: required if name is empty
// name: required if id is empty
// state_: return value
type MachineRebootReqRespData struct {
	Vms          []*IdNamePair `protobuf:"bytes,1,rep,name=vms" json:"vms,omitempty"`
	StateCode    int32         `protobuf:"varint,2,opt,name=state_code,json=stateCode,proto3" json:"state_code,omitempty"`
	StateMessage string        `protobuf:"bytes,3,opt,name=state_message,json=stateMessage,proto3" json:"state_message,omitempty"`
}

func (m *MachineRebootReqRespData) Reset()                    { *m = MachineRebootReqRespData{} }
func (m *MachineRebootReqRespData) String() string            { return proto.CompactTextString(m) }
func (*MachineRebootReqRespData) ProtoMessage()               {}
func (*MachineRebootReqRespData) Descriptor() ([]byte, []int) { return fileDescriptorData, []int{9} }

func (m *MachineRebootReqRespData) GetVms() []*IdNamePair {
	if m != nil {
		return m.Vms
	}
	return nil
}

func (m *MachineRebootReqRespData) GetStateCode() int32 {
	if m != nil {
		return m.StateCode
	}
	return 0
}

func (m *MachineRebootReqRespData) GetStateMessage() string {
	if m != nil {
		return m.StateMessage
	}
	return ""
}

// Flavor records represent (virtual) hardware configurations for server resources in a region.
type Flavor struct {
	// The Id field contains the flavor's unique identifier.
	// For example, this identifier will be useful when specifying which hardware configuration to use for a new server instance.
	// ID string json:"id"
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The Disk and RA< fields provide a measure of storage space offered by the flavor, in GB and MB, respectively.
	// Disk int json:"disk"
	// RAM  int json:"ram"
	Disk int32 `protobuf:"varint,2,opt,name=disk,proto3" json:"disk,omitempty"`
	Ram  int32 `protobuf:"varint,3,opt,name=ram,proto3" json:"ram,omitempty"`
	// The Name field provides a human-readable moniker for the flavor.
	// Name       string  json:"name"
	// RxTxFactor float64 json:"rxtx_factor"
	Name       string  `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	RxtxFactor float64 `protobuf:"fixed64,5,opt,name=rxtx_factor,json=rxtxFactor,proto3" json:"rxtx_factor,omitempty"`
	// Swap indicates how much space is reserved for swap.
	// If not provided, this field will be set to 0.
	// Swap int json:"swap"
	Swap int32 `protobuf:"varint,6,opt,name=swap,proto3" json:"swap,omitempty"`
	// VCPUs indicates how many (virtual) CPUs are available for this flavor.
	// VCPUs int json:"vcpus"
	Vcpus int32 `protobuf:"varint,7,opt,name=vcpus,proto3" json:"vcpus,omitempty"`
	// IsPublic indicates whether the flavor is public.
	// IsPublic bool json:"is_public"
	IsPublic bool `protobuf:"varint,8,opt,name=is_public,json=isPublic,proto3" json:"is_public,omitempty"`
}

func (m *Flavor) Reset()                    { *m = Flavor{} }
func (m *Flavor) String() string            { return proto.CompactTextString(m) }
func (*Flavor) ProtoMessage()               {}
func (*Flavor) Descriptor() ([]byte, []int) { return fileDescriptorData, []int{10} }

func (m *Flavor) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Flavor) GetDisk() int32 {
	if m != nil {
		return m.Disk
	}
	return 0
}

func (m *Flavor) GetRam() int32 {
	if m != nil {
		return m.Ram
	}
	return 0
}

func (m *Flavor) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Flavor) GetRxtxFactor() float64 {
	if m != nil {
		return m.RxtxFactor
	}
	return 0
}

func (m *Flavor) GetSwap() int32 {
	if m != nil {
		return m.Swap
	}
	return 0
}

func (m *Flavor) GetVcpus() int32 {
	if m != nil {
		return m.Vcpus
	}
	return 0
}

func (m *Flavor) GetIsPublic() bool {
	if m != nil {
		return m.IsPublic
	}
	return false
}

// Booting machines data structure, used as input/output argument.
//
// For request, only 'flavor', 'image', 'count', 'secgroups', 'networks' are required
// As response, provide 'servers' with additonal 'port', 'floatingip' relations
type OpenstackNovaBootReqRespData struct {
	// Flavor id, command line 'openstack flavor list' or 'nova flavor-list' to get alls
	// Required if 'flavor_name' is not provided
	FlavorId string `protobuf:"bytes,1,opt,name=flavor_id,json=flavorId,proto3" json:"flavor_id,omitempty"`
	// Flavor name
	// Required if 'flavor_id' is not provided
	FlavorName string `protobuf:"bytes,2,opt,name=flavor_name,json=flavorName,proto3" json:"flavor_name,omitempty"`
	// Image id, command line 'openstack image list' or 'glance image-list' to get alls
	// Required if 'image_name' is not provided
	ImageId string `protobuf:"bytes,3,opt,name=image_id,json=imageId,proto3" json:"image_id,omitempty"`
	// Image name
	// Required if 'image_id' is not provided
	ImageName string `protobuf:"bytes,4,opt,name=image_name,json=imageName,proto3" json:"image_name,omitempty"`
	// Min count, the minimized machines to boot
	// Optional, the default just one machine, must less or equal than 'max_count'
	MinCount int32 `protobuf:"varint,5,opt,name=min_count,json=minCount,proto3" json:"min_count,omitempty"`
	// Max count, the maxmized machines to boot
	// Optional, the default just one machine, must greater or equal than 'min_count'
	MaxCount int32 `protobuf:"varint,6,opt,name=max_count,json=maxCount,proto3" json:"max_count,omitempty"`
	// Security Groups Information, array of ID/Name pairs
	// Optional, nova will using 'default' secgroup
	SecgroupsInfo []*SecGroupInfo `protobuf:"bytes,7,rep,name=secgroups_info,json=secgroupsInfo" json:"secgroups_info,omitempty"`
	// User data to inject into booting
	// Optional
	UserData []byte `protobuf:"bytes,8,opt,name=user_data,json=userData,proto3" json:"user_data,omitempty"`
	// The internal network that machine should boot into
	// Required, if 'network_name' is not provided
	NetworkId string `protobuf:"bytes,9,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	// The internal network that machine should boot into
	// Required alternatively for 'network_id'
	NetworkName string `protobuf:"bytes,10,opt,name=network_name,json=networkName,proto3" json:"network_name,omitempty"`
	// The external network that floating ip should generate into
	// Required, if 'floating_network_name' is not provided
	FloatingNetworkId string `protobuf:"bytes,11,opt,name=floating_network_id,json=floatingNetworkId,proto3" json:"floating_network_id,omitempty"`
	// The internal network that machine should boot into
	// Required alternatively for 'floating_network_id'
	FloatingNetworkName string `protobuf:"bytes,12,opt,name=floating_network_name,json=floatingNetworkName,proto3" json:"floating_network_name,omitempty"`
	// The upload file (bytes) inject into booting
	// Optional
	Personality []*echopb_openstack_nova.File `protobuf:"bytes,13,rep,name=personality" json:"personality,omitempty"`
	// State code, return non zero decimal if creation failed
	// Return value
	StateCode int32 `protobuf:"varint,14,opt,name=state_code,json=stateCode,proto3" json:"state_code,omitempty"`
	// State message, return errors if createion failed
	StateMessage string `protobuf:"bytes,15,opt,name=state_message,json=stateMessage,proto3" json:"state_message,omitempty"`
	// Port details, the nic content created for server
	// Return value
	Ports []*echopb_openstack_neutron.Port `protobuf:"bytes,16,rep,name=ports" json:"ports,omitempty"`
	// Server details
	// Return value
	Servers []*echopb_openstack_nova.Server `protobuf:"bytes,17,rep,name=servers" json:"servers,omitempty"`
	// Floating IP details
	// Return value
	FloatingIps []*echopb_openstack_neutron.FloatingIP `protobuf:"bytes,18,rep,name=floating_ips,json=floatingIps" json:"floating_ips,omitempty"`
	// Port-Server dictionary
	// Return value
	PortServerPairs map[string]string `protobuf:"bytes,19,rep,name=port_server_pairs,json=portServerPairs" json:"port_server_pairs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// FloatingIP-Server dictionary
	// Return value
	FipServerPairs map[string]string `protobuf:"bytes,20,rep,name=fip_server_pairs,json=fipServerPairs" json:"fip_server_pairs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Server name, or name prefix for multi-creations
	// Required
	NamePrefix string `protobuf:"bytes,21,opt,name=name_prefix,json=namePrefix,proto3" json:"name_prefix,omitempty"`
}

func (m *OpenstackNovaBootReqRespData) Reset()         { *m = OpenstackNovaBootReqRespData{} }
func (m *OpenstackNovaBootReqRespData) String() string { return proto.CompactTextString(m) }
func (*OpenstackNovaBootReqRespData) ProtoMessage()    {}
func (*OpenstackNovaBootReqRespData) Descriptor() ([]byte, []int) {
	return fileDescriptorData, []int{11}
}

func (m *OpenstackNovaBootReqRespData) GetFlavorId() string {
	if m != nil {
		return m.FlavorId
	}
	return ""
}

func (m *OpenstackNovaBootReqRespData) GetFlavorName() string {
	if m != nil {
		return m.FlavorName
	}
	return ""
}

func (m *OpenstackNovaBootReqRespData) GetImageId() string {
	if m != nil {
		return m.ImageId
	}
	return ""
}

func (m *OpenstackNovaBootReqRespData) GetImageName() string {
	if m != nil {
		return m.ImageName
	}
	return ""
}

func (m *OpenstackNovaBootReqRespData) GetMinCount() int32 {
	if m != nil {
		return m.MinCount
	}
	return 0
}

func (m *OpenstackNovaBootReqRespData) GetMaxCount() int32 {
	if m != nil {
		return m.MaxCount
	}
	return 0
}

func (m *OpenstackNovaBootReqRespData) GetSecgroupsInfo() []*SecGroupInfo {
	if m != nil {
		return m.SecgroupsInfo
	}
	return nil
}

func (m *OpenstackNovaBootReqRespData) GetUserData() []byte {
	if m != nil {
		return m.UserData
	}
	return nil
}

func (m *OpenstackNovaBootReqRespData) GetNetworkId() string {
	if m != nil {
		return m.NetworkId
	}
	return ""
}

func (m *OpenstackNovaBootReqRespData) GetNetworkName() string {
	if m != nil {
		return m.NetworkName
	}
	return ""
}

func (m *OpenstackNovaBootReqRespData) GetFloatingNetworkId() string {
	if m != nil {
		return m.FloatingNetworkId
	}
	return ""
}

func (m *OpenstackNovaBootReqRespData) GetFloatingNetworkName() string {
	if m != nil {
		return m.FloatingNetworkName
	}
	return ""
}

func (m *OpenstackNovaBootReqRespData) GetPersonality() []*echopb_openstack_nova.File {
	if m != nil {
		return m.Personality
	}
	return nil
}

func (m *OpenstackNovaBootReqRespData) GetStateCode() int32 {
	if m != nil {
		return m.StateCode
	}
	return 0
}

func (m *OpenstackNovaBootReqRespData) GetStateMessage() string {
	if m != nil {
		return m.StateMessage
	}
	return ""
}

func (m *OpenstackNovaBootReqRespData) GetPorts() []*echopb_openstack_neutron.Port {
	if m != nil {
		return m.Ports
	}
	return nil
}

func (m *OpenstackNovaBootReqRespData) GetServers() []*echopb_openstack_nova.Server {
	if m != nil {
		return m.Servers
	}
	return nil
}

func (m *OpenstackNovaBootReqRespData) GetFloatingIps() []*echopb_openstack_neutron.FloatingIP {
	if m != nil {
		return m.FloatingIps
	}
	return nil
}

func (m *OpenstackNovaBootReqRespData) GetPortServerPairs() map[string]string {
	if m != nil {
		return m.PortServerPairs
	}
	return nil
}

func (m *OpenstackNovaBootReqRespData) GetFipServerPairs() map[string]string {
	if m != nil {
		return m.FipServerPairs
	}
	return nil
}

func (m *OpenstackNovaBootReqRespData) GetNamePrefix() string {
	if m != nil {
		return m.NamePrefix
	}
	return ""
}

type SecGroupInfo struct {
	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *SecGroupInfo) Reset()                    { *m = SecGroupInfo{} }
func (m *SecGroupInfo) String() string            { return proto.CompactTextString(m) }
func (*SecGroupInfo) ProtoMessage()               {}
func (*SecGroupInfo) Descriptor() ([]byte, []int) { return fileDescriptorData, []int{12} }

func (m *SecGroupInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *SecGroupInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type IfaceInfo struct {
	RouterId        string          `protobuf:"bytes,1,opt,name=router_id,json=routerId,proto3" json:"router_id,omitempty"`
	RouterName      string          `protobuf:"bytes,2,opt,name=router_name,json=routerName,proto3" json:"router_name,omitempty"`
	NetworkId       string          `protobuf:"bytes,3,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	NetworkName     string          `protobuf:"bytes,4,opt,name=network_name,json=networkName,proto3" json:"network_name,omitempty"`
	SubnetId        string          `protobuf:"bytes,5,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	SubnetName      string          `protobuf:"bytes,6,opt,name=subnet_name,json=subnetName,proto3" json:"subnet_name,omitempty"`
	SecgroupsInfo   []*SecGroupInfo `protobuf:"bytes,7,rep,name=secgroups_info,json=secgroupsInfo" json:"secgroups_info,omitempty"`
	PortId          string          `protobuf:"bytes,8,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
	PortName        string          `protobuf:"bytes,9,opt,name=port_name,json=portName,proto3" json:"port_name,omitempty"`
	InterfaceInfoId string          `protobuf:"bytes,10,opt,name=interface_info_id,json=interfaceInfoId,proto3" json:"interface_info_id,omitempty"`
}

func (m *IfaceInfo) Reset()                    { *m = IfaceInfo{} }
func (m *IfaceInfo) String() string            { return proto.CompactTextString(m) }
func (*IfaceInfo) ProtoMessage()               {}
func (*IfaceInfo) Descriptor() ([]byte, []int) { return fileDescriptorData, []int{13} }

func (m *IfaceInfo) GetRouterId() string {
	if m != nil {
		return m.RouterId
	}
	return ""
}

func (m *IfaceInfo) GetRouterName() string {
	if m != nil {
		return m.RouterName
	}
	return ""
}

func (m *IfaceInfo) GetNetworkId() string {
	if m != nil {
		return m.NetworkId
	}
	return ""
}

func (m *IfaceInfo) GetNetworkName() string {
	if m != nil {
		return m.NetworkName
	}
	return ""
}

func (m *IfaceInfo) GetSubnetId() string {
	if m != nil {
		return m.SubnetId
	}
	return ""
}

func (m *IfaceInfo) GetSubnetName() string {
	if m != nil {
		return m.SubnetName
	}
	return ""
}

func (m *IfaceInfo) GetSecgroupsInfo() []*SecGroupInfo {
	if m != nil {
		return m.SecgroupsInfo
	}
	return nil
}

func (m *IfaceInfo) GetPortId() string {
	if m != nil {
		return m.PortId
	}
	return ""
}

func (m *IfaceInfo) GetPortName() string {
	if m != nil {
		return m.PortName
	}
	return ""
}

func (m *IfaceInfo) GetInterfaceInfoId() string {
	if m != nil {
		return m.InterfaceInfoId
	}
	return ""
}

type GatewayInfo struct {
	NetworkId   string `protobuf:"bytes,1,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	NetworkName string `protobuf:"bytes,2,opt,name=network_name,json=networkName,proto3" json:"network_name,omitempty"`
	RouterId    string `protobuf:"bytes,3,opt,name=router_id,json=routerId,proto3" json:"router_id,omitempty"`
	RouterName  string `protobuf:"bytes,4,opt,name=router_name,json=routerName,proto3" json:"router_name,omitempty"`
}

func (m *GatewayInfo) Reset()                    { *m = GatewayInfo{} }
func (m *GatewayInfo) String() string            { return proto.CompactTextString(m) }
func (*GatewayInfo) ProtoMessage()               {}
func (*GatewayInfo) Descriptor() ([]byte, []int) { return fileDescriptorData, []int{14} }

func (m *GatewayInfo) GetNetworkId() string {
	if m != nil {
		return m.NetworkId
	}
	return ""
}

func (m *GatewayInfo) GetNetworkName() string {
	if m != nil {
		return m.NetworkName
	}
	return ""
}

func (m *GatewayInfo) GetRouterId() string {
	if m != nil {
		return m.RouterId
	}
	return ""
}

func (m *GatewayInfo) GetRouterName() string {
	if m != nil {
		return m.RouterName
	}
	return ""
}

type OpenstackNeutronLandscapeReqRespData struct {
	Vnets          []*echopb_openstack_neutron.Network       `protobuf:"bytes,1,rep,name=vnets" json:"vnets,omitempty"`
	Vrouter        *echopb_openstack_neutron.Router          `protobuf:"bytes,2,opt,name=vrouter" json:"vrouter,omitempty"`
	Secgroup       *echopb_openstack_neutron.SecGroup        `protobuf:"bytes,3,opt,name=secgroup" json:"secgroup,omitempty"`
	IfacesInfo     []*IfaceInfo                              `protobuf:"bytes,4,rep,name=ifaces_info,json=ifacesInfo" json:"ifaces_info,omitempty"`
	GatewaysInfo   []*GatewayInfo                            `protobuf:"bytes,5,rep,name=gateways_info,json=gatewaysInfo" json:"gateways_info,omitempty"`
	StateCode      int32                                     `protobuf:"varint,6,opt,name=state_code,json=stateCode,proto3" json:"state_code,omitempty"`
	StateMessage   string                                    `protobuf:"bytes,7,opt,name=state_message,json=stateMessage,proto3" json:"state_message,omitempty"`
	Ports          []*echopb_openstack_neutron.Port          `protobuf:"bytes,8,rep,name=ports" json:"ports,omitempty"`
	InterfacesInfo []*echopb_openstack_neutron.InterfaceInfo `protobuf:"bytes,9,rep,name=interfaces_info,json=interfacesInfo" json:"interfaces_info,omitempty"`
}

func (m *OpenstackNeutronLandscapeReqRespData) Reset()         { *m = OpenstackNeutronLandscapeReqRespData{} }
func (m *OpenstackNeutronLandscapeReqRespData) String() string { return proto.CompactTextString(m) }
func (*OpenstackNeutronLandscapeReqRespData) ProtoMessage()    {}
func (*OpenstackNeutronLandscapeReqRespData) Descriptor() ([]byte, []int) {
	return fileDescriptorData, []int{15}
}

func (m *OpenstackNeutronLandscapeReqRespData) GetVnets() []*echopb_openstack_neutron.Network {
	if m != nil {
		return m.Vnets
	}
	return nil
}

func (m *OpenstackNeutronLandscapeReqRespData) GetVrouter() *echopb_openstack_neutron.Router {
	if m != nil {
		return m.Vrouter
	}
	return nil
}

func (m *OpenstackNeutronLandscapeReqRespData) GetSecgroup() *echopb_openstack_neutron.SecGroup {
	if m != nil {
		return m.Secgroup
	}
	return nil
}

func (m *OpenstackNeutronLandscapeReqRespData) GetIfacesInfo() []*IfaceInfo {
	if m != nil {
		return m.IfacesInfo
	}
	return nil
}

func (m *OpenstackNeutronLandscapeReqRespData) GetGatewaysInfo() []*GatewayInfo {
	if m != nil {
		return m.GatewaysInfo
	}
	return nil
}

func (m *OpenstackNeutronLandscapeReqRespData) GetStateCode() int32 {
	if m != nil {
		return m.StateCode
	}
	return 0
}

func (m *OpenstackNeutronLandscapeReqRespData) GetStateMessage() string {
	if m != nil {
		return m.StateMessage
	}
	return ""
}

func (m *OpenstackNeutronLandscapeReqRespData) GetPorts() []*echopb_openstack_neutron.Port {
	if m != nil {
		return m.Ports
	}
	return nil
}

func (m *OpenstackNeutronLandscapeReqRespData) GetInterfacesInfo() []*echopb_openstack_neutron.InterfaceInfo {
	if m != nil {
		return m.InterfacesInfo
	}
	return nil
}

type OpenstackNeutronNetRequestData struct {
	Id      string                            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name    string                            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Router  *echopb_openstack_neutron.Router  `protobuf:"bytes,3,opt,name=router" json:"router,omitempty"`
	Network *echopb_openstack_neutron.Network `protobuf:"bytes,4,opt,name=network" json:"network,omitempty"`
}

func (m *OpenstackNeutronNetRequestData) Reset()         { *m = OpenstackNeutronNetRequestData{} }
func (m *OpenstackNeutronNetRequestData) String() string { return proto.CompactTextString(m) }
func (*OpenstackNeutronNetRequestData) ProtoMessage()    {}
func (*OpenstackNeutronNetRequestData) Descriptor() ([]byte, []int) {
	return fileDescriptorData, []int{16}
}

func (m *OpenstackNeutronNetRequestData) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *OpenstackNeutronNetRequestData) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *OpenstackNeutronNetRequestData) GetRouter() *echopb_openstack_neutron.Router {
	if m != nil {
		return m.Router
	}
	return nil
}

func (m *OpenstackNeutronNetRequestData) GetNetwork() *echopb_openstack_neutron.Network {
	if m != nil {
		return m.Network
	}
	return nil
}

type OpenstackNeutronNetResponseData struct {
	Id               string                                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name             string                                  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Router           *echopb_openstack_neutron.Router        `protobuf:"bytes,3,opt,name=router" json:"router,omitempty"`
	Network          *echopb_openstack_neutron.Network       `protobuf:"bytes,4,opt,name=network" json:"network,omitempty"`
	InterfaceInfo    *echopb_openstack_neutron.InterfaceInfo `protobuf:"bytes,5,opt,name=interface_info,json=interfaceInfo" json:"interface_info,omitempty"`
	GatewayNetworkId string                                  `protobuf:"bytes,6,opt,name=gateway_network_id,json=gatewayNetworkId,proto3" json:"gateway_network_id,omitempty"`
}

func (m *OpenstackNeutronNetResponseData) Reset()         { *m = OpenstackNeutronNetResponseData{} }
func (m *OpenstackNeutronNetResponseData) String() string { return proto.CompactTextString(m) }
func (*OpenstackNeutronNetResponseData) ProtoMessage()    {}
func (*OpenstackNeutronNetResponseData) Descriptor() ([]byte, []int) {
	return fileDescriptorData, []int{17}
}

func (m *OpenstackNeutronNetResponseData) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *OpenstackNeutronNetResponseData) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *OpenstackNeutronNetResponseData) GetRouter() *echopb_openstack_neutron.Router {
	if m != nil {
		return m.Router
	}
	return nil
}

func (m *OpenstackNeutronNetResponseData) GetNetwork() *echopb_openstack_neutron.Network {
	if m != nil {
		return m.Network
	}
	return nil
}

func (m *OpenstackNeutronNetResponseData) GetInterfaceInfo() *echopb_openstack_neutron.InterfaceInfo {
	if m != nil {
		return m.InterfaceInfo
	}
	return nil
}

func (m *OpenstackNeutronNetResponseData) GetGatewayNetworkId() string {
	if m != nil {
		return m.GatewayNetworkId
	}
	return ""
}

type ConsoleResourceRequestData struct {
	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *ConsoleResourceRequestData) Reset()                    { *m = ConsoleResourceRequestData{} }
func (m *ConsoleResourceRequestData) String() string            { return proto.CompactTextString(m) }
func (*ConsoleResourceRequestData) ProtoMessage()               {}
func (*ConsoleResourceRequestData) Descriptor() ([]byte, []int) { return fileDescriptorData, []int{18} }

func (m *ConsoleResourceRequestData) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ConsoleResourceRequestData) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ConsoleResourceResponseData struct {
	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *ConsoleResourceResponseData) Reset()                    { *m = ConsoleResourceResponseData{} }
func (m *ConsoleResourceResponseData) String() string            { return proto.CompactTextString(m) }
func (*ConsoleResourceResponseData) ProtoMessage()               {}
func (*ConsoleResourceResponseData) Descriptor() ([]byte, []int) { return fileDescriptorData, []int{19} }

func (m *ConsoleResourceResponseData) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ConsoleResourceResponseData) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type TraineeDroneRequestData struct {
	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *TraineeDroneRequestData) Reset()                    { *m = TraineeDroneRequestData{} }
func (m *TraineeDroneRequestData) String() string            { return proto.CompactTextString(m) }
func (*TraineeDroneRequestData) ProtoMessage()               {}
func (*TraineeDroneRequestData) Descriptor() ([]byte, []int) { return fileDescriptorData, []int{20} }

func (m *TraineeDroneRequestData) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TraineeDroneRequestData) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type TraineeDroneResponseData struct {
	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *TraineeDroneResponseData) Reset()                    { *m = TraineeDroneResponseData{} }
func (m *TraineeDroneResponseData) String() string            { return proto.CompactTextString(m) }
func (*TraineeDroneResponseData) ProtoMessage()               {}
func (*TraineeDroneResponseData) Descriptor() ([]byte, []int) { return fileDescriptorData, []int{21} }

func (m *TraineeDroneResponseData) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TraineeDroneResponseData) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type DefensiveDroneRequestData struct {
	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *DefensiveDroneRequestData) Reset()                    { *m = DefensiveDroneRequestData{} }
func (m *DefensiveDroneRequestData) String() string            { return proto.CompactTextString(m) }
func (*DefensiveDroneRequestData) ProtoMessage()               {}
func (*DefensiveDroneRequestData) Descriptor() ([]byte, []int) { return fileDescriptorData, []int{22} }

func (m *DefensiveDroneRequestData) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *DefensiveDroneRequestData) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type DefensiveDroneResponseData struct {
	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *DefensiveDroneResponseData) Reset()                    { *m = DefensiveDroneResponseData{} }
func (m *DefensiveDroneResponseData) String() string            { return proto.CompactTextString(m) }
func (*DefensiveDroneResponseData) ProtoMessage()               {}
func (*DefensiveDroneResponseData) Descriptor() ([]byte, []int) { return fileDescriptorData, []int{23} }

func (m *DefensiveDroneResponseData) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *DefensiveDroneResponseData) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type TokenReqRespData struct {
	Src *echopb_openstack_identity.TokenCredentialsV2 `protobuf:"bytes,1,opt,name=src" json:"src,omitempty"`
	Tgt *echopb_openstack_identity.Token              `protobuf:"bytes,2,opt,name=tgt" json:"tgt,omitempty"`
}

func (m *TokenReqRespData) Reset()                    { *m = TokenReqRespData{} }
func (m *TokenReqRespData) String() string            { return proto.CompactTextString(m) }
func (*TokenReqRespData) ProtoMessage()               {}
func (*TokenReqRespData) Descriptor() ([]byte, []int) { return fileDescriptorData, []int{24} }

func (m *TokenReqRespData) GetSrc() *echopb_openstack_identity.TokenCredentialsV2 {
	if m != nil {
		return m.Src
	}
	return nil
}

func (m *TokenReqRespData) GetTgt() *echopb_openstack_identity.Token {
	if m != nil {
		return m.Tgt
	}
	return nil
}

// For Libvirt
//
type LibvirtDomainInfo struct {
	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Uuid    string `protobuf:"bytes,3,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Display string `protobuf:"bytes,4,opt,name=display,proto3" json:"display,omitempty"`
}

func (m *LibvirtDomainInfo) Reset()                    { *m = LibvirtDomainInfo{} }
func (m *LibvirtDomainInfo) String() string            { return proto.CompactTextString(m) }
func (*LibvirtDomainInfo) ProtoMessage()               {}
func (*LibvirtDomainInfo) Descriptor() ([]byte, []int) { return fileDescriptorData, []int{25} }

func (m *LibvirtDomainInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *LibvirtDomainInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *LibvirtDomainInfo) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *LibvirtDomainInfo) GetDisplay() string {
	if m != nil {
		return m.Display
	}
	return ""
}

type LibvirtDomainReqRespData struct {
	ServerId     string             `protobuf:"bytes,1,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`
	StateCode    int32              `protobuf:"varint,2,opt,name=state_code,json=stateCode,proto3" json:"state_code,omitempty"`
	StateMessage string             `protobuf:"bytes,3,opt,name=state_message,json=stateMessage,proto3" json:"state_message,omitempty"`
	DomainInfo   *LibvirtDomainInfo `protobuf:"bytes,4,opt,name=domain_info,json=domainInfo" json:"domain_info,omitempty"`
}

func (m *LibvirtDomainReqRespData) Reset()                    { *m = LibvirtDomainReqRespData{} }
func (m *LibvirtDomainReqRespData) String() string            { return proto.CompactTextString(m) }
func (*LibvirtDomainReqRespData) ProtoMessage()               {}
func (*LibvirtDomainReqRespData) Descriptor() ([]byte, []int) { return fileDescriptorData, []int{26} }

func (m *LibvirtDomainReqRespData) GetServerId() string {
	if m != nil {
		return m.ServerId
	}
	return ""
}

func (m *LibvirtDomainReqRespData) GetStateCode() int32 {
	if m != nil {
		return m.StateCode
	}
	return 0
}

func (m *LibvirtDomainReqRespData) GetStateMessage() string {
	if m != nil {
		return m.StateMessage
	}
	return ""
}

func (m *LibvirtDomainReqRespData) GetDomainInfo() *LibvirtDomainInfo {
	if m != nil {
		return m.DomainInfo
	}
	return nil
}

type PhsicalLayerInfo struct {
	Description   string `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	Product       string `protobuf:"bytes,2,opt,name=product,proto3" json:"product,omitempty"`
	Vender        string `protobuf:"bytes,3,opt,name=vender,proto3" json:"vender,omitempty"`
	BusInfo       string `protobuf:"bytes,4,opt,name=bus_info,json=busInfo,proto3" json:"bus_info,omitempty"`
	LogicalName   string `protobuf:"bytes,5,opt,name=logical_name,json=logicalName,proto3" json:"logical_name,omitempty"`
	Version       string `protobuf:"bytes,6,opt,name=version,proto3" json:"version,omitempty"`
	Serial        string `protobuf:"bytes,7,opt,name=serial,proto3" json:"serial,omitempty"`
	Configuration string `protobuf:"bytes,8,opt,name=configuration,proto3" json:"configuration,omitempty"`
	Resources     string `protobuf:"bytes,9,opt,name=resources,proto3" json:"resources,omitempty"`
}

func (m *PhsicalLayerInfo) Reset()                    { *m = PhsicalLayerInfo{} }
func (m *PhsicalLayerInfo) String() string            { return proto.CompactTextString(m) }
func (*PhsicalLayerInfo) ProtoMessage()               {}
func (*PhsicalLayerInfo) Descriptor() ([]byte, []int) { return fileDescriptorData, []int{27} }

func (m *PhsicalLayerInfo) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *PhsicalLayerInfo) GetProduct() string {
	if m != nil {
		return m.Product
	}
	return ""
}

func (m *PhsicalLayerInfo) GetVender() string {
	if m != nil {
		return m.Vender
	}
	return ""
}

func (m *PhsicalLayerInfo) GetBusInfo() string {
	if m != nil {
		return m.BusInfo
	}
	return ""
}

func (m *PhsicalLayerInfo) GetLogicalName() string {
	if m != nil {
		return m.LogicalName
	}
	return ""
}

func (m *PhsicalLayerInfo) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *PhsicalLayerInfo) GetSerial() string {
	if m != nil {
		return m.Serial
	}
	return ""
}

func (m *PhsicalLayerInfo) GetConfiguration() string {
	if m != nil {
		return m.Configuration
	}
	return ""
}

func (m *PhsicalLayerInfo) GetResources() string {
	if m != nil {
		return m.Resources
	}
	return ""
}

type LinkLayerInfo struct {
	InterfaceName string `protobuf:"bytes,1,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
	InterfaceType string `protobuf:"bytes,2,opt,name=interface_type,json=interfaceType,proto3" json:"interface_type,omitempty"`
	Numtxqueues   int32  `protobuf:"varint,3,opt,name=numtxqueues,proto3" json:"numtxqueues,omitempty"`
	Numrxqueues   int32  `protobuf:"varint,4,opt,name=numrxqueues,proto3" json:"numrxqueues,omitempty"`
	Index         int32  `protobuf:"varint,5,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *LinkLayerInfo) Reset()                    { *m = LinkLayerInfo{} }
func (m *LinkLayerInfo) String() string            { return proto.CompactTextString(m) }
func (*LinkLayerInfo) ProtoMessage()               {}
func (*LinkLayerInfo) Descriptor() ([]byte, []int) { return fileDescriptorData, []int{28} }

func (m *LinkLayerInfo) GetInterfaceName() string {
	if m != nil {
		return m.InterfaceName
	}
	return ""
}

func (m *LinkLayerInfo) GetInterfaceType() string {
	if m != nil {
		return m.InterfaceType
	}
	return ""
}

func (m *LinkLayerInfo) GetNumtxqueues() int32 {
	if m != nil {
		return m.Numtxqueues
	}
	return 0
}

func (m *LinkLayerInfo) GetNumrxqueues() int32 {
	if m != nil {
		return m.Numrxqueues
	}
	return 0
}

func (m *LinkLayerInfo) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

type NetLayerInfo struct {
	Layer1 *LinkLayerInfo `protobuf:"bytes,1,opt,name=layer1" json:"layer1,omitempty"`
	IpV4   string         `protobuf:"bytes,2,opt,name=ip_v4,json=ipV4,proto3" json:"ip_v4,omitempty"`
}

func (m *NetLayerInfo) Reset()                    { *m = NetLayerInfo{} }
func (m *NetLayerInfo) String() string            { return proto.CompactTextString(m) }
func (*NetLayerInfo) ProtoMessage()               {}
func (*NetLayerInfo) Descriptor() ([]byte, []int) { return fileDescriptorData, []int{29} }

func (m *NetLayerInfo) GetLayer1() *LinkLayerInfo {
	if m != nil {
		return m.Layer1
	}
	return nil
}

func (m *NetLayerInfo) GetIpV4() string {
	if m != nil {
		return m.IpV4
	}
	return ""
}

type TransLayerInfo struct {
	Layer2   *NetLayerInfo `protobuf:"bytes,1,opt,name=layer2" json:"layer2,omitempty"`
	Protocol string        `protobuf:"bytes,2,opt,name=protocol,proto3" json:"protocol,omitempty"`
	SrcIp    string        `protobuf:"bytes,3,opt,name=src_ip,json=srcIp,proto3" json:"src_ip,omitempty"`
	DstIp    string        `protobuf:"bytes,4,opt,name=dst_ip,json=dstIp,proto3" json:"dst_ip,omitempty"`
}

func (m *TransLayerInfo) Reset()                    { *m = TransLayerInfo{} }
func (m *TransLayerInfo) String() string            { return proto.CompactTextString(m) }
func (*TransLayerInfo) ProtoMessage()               {}
func (*TransLayerInfo) Descriptor() ([]byte, []int) { return fileDescriptorData, []int{30} }

func (m *TransLayerInfo) GetLayer2() *NetLayerInfo {
	if m != nil {
		return m.Layer2
	}
	return nil
}

func (m *TransLayerInfo) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

func (m *TransLayerInfo) GetSrcIp() string {
	if m != nil {
		return m.SrcIp
	}
	return ""
}

func (m *TransLayerInfo) GetDstIp() string {
	if m != nil {
		return m.DstIp
	}
	return ""
}

// For TCP/IP model only, such as IPSec
//
type InternetModel struct {
	AuthenticationHeaderProtocol         string `protobuf:"bytes,1,opt,name=authentication_header_protocol,json=authenticationHeaderProtocol,proto3" json:"authentication_header_protocol,omitempty"`
	EncapsulationSecurityPayloadProtocol string `protobuf:"bytes,2,opt,name=encapsulation_security_payload_protocol,json=encapsulationSecurityPayloadProtocol,proto3" json:"encapsulation_security_payload_protocol,omitempty"`
}

func (m *InternetModel) Reset()                    { *m = InternetModel{} }
func (m *InternetModel) String() string            { return proto.CompactTextString(m) }
func (*InternetModel) ProtoMessage()               {}
func (*InternetModel) Descriptor() ([]byte, []int) { return fileDescriptorData, []int{31} }

func (m *InternetModel) GetAuthenticationHeaderProtocol() string {
	if m != nil {
		return m.AuthenticationHeaderProtocol
	}
	return ""
}

func (m *InternetModel) GetEncapsulationSecurityPayloadProtocol() string {
	if m != nil {
		return m.EncapsulationSecurityPayloadProtocol
	}
	return ""
}

type OSILayersReqRespData struct {
	Layer2             *NetLayerInfo `protobuf:"bytes,1,opt,name=layer2" json:"layer2,omitempty"`
	StateCode          int32         `protobuf:"varint,2,opt,name=state_code,json=stateCode,proto3" json:"state_code,omitempty"`
	StateMessage       string        `protobuf:"bytes,3,opt,name=state_message,json=stateMessage,proto3" json:"state_message,omitempty"`
	ApplicationContent []byte        `protobuf:"bytes,4,opt,name=application_content,json=applicationContent,proto3" json:"application_content,omitempty"`
}

func (m *OSILayersReqRespData) Reset()                    { *m = OSILayersReqRespData{} }
func (m *OSILayersReqRespData) String() string            { return proto.CompactTextString(m) }
func (*OSILayersReqRespData) ProtoMessage()               {}
func (*OSILayersReqRespData) Descriptor() ([]byte, []int) { return fileDescriptorData, []int{32} }

func (m *OSILayersReqRespData) GetLayer2() *NetLayerInfo {
	if m != nil {
		return m.Layer2
	}
	return nil
}

func (m *OSILayersReqRespData) GetStateCode() int32 {
	if m != nil {
		return m.StateCode
	}
	return 0
}

func (m *OSILayersReqRespData) GetStateMessage() string {
	if m != nil {
		return m.StateMessage
	}
	return ""
}

func (m *OSILayersReqRespData) GetApplicationContent() []byte {
	if m != nil {
		return m.ApplicationContent
	}
	return nil
}

func init() {
	proto.RegisterType((*IdNamePair)(nil), "echopb.openstack.IdNamePair")
	proto.RegisterType((*NetworkDiscoveryReqRespData)(nil), "echopb.openstack.NetworkDiscoveryReqRespData")
	proto.RegisterType((*SubnetDiscoveryReqRespData)(nil), "echopb.openstack.SubnetDiscoveryReqRespData")
	proto.RegisterType((*NetworkTopologyReqRespData)(nil), "echopb.openstack.NetworkTopologyReqRespData")
	proto.RegisterType((*ImageDiscoveryReqRespData)(nil), "echopb.openstack.ImageDiscoveryReqRespData")
	proto.RegisterType((*FlavorDiscoveryReqRespData)(nil), "echopb.openstack.FlavorDiscoveryReqRespData")
	proto.RegisterType((*MachineSpawnsReqRespData)(nil), "echopb.openstack.MachineSpawnsReqRespData")
	proto.RegisterType((*MachineDiscoveryReqRespData)(nil), "echopb.openstack.MachineDiscoveryReqRespData")
	proto.RegisterType((*MachineDestroyReqRespData)(nil), "echopb.openstack.MachineDestroyReqRespData")
	proto.RegisterType((*MachineRebootReqRespData)(nil), "echopb.openstack.MachineRebootReqRespData")
	proto.RegisterType((*Flavor)(nil), "echopb.openstack.Flavor")
	proto.RegisterType((*OpenstackNovaBootReqRespData)(nil), "echopb.openstack.OpenstackNovaBootReqRespData")
	proto.RegisterType((*SecGroupInfo)(nil), "echopb.openstack.SecGroupInfo")
	proto.RegisterType((*IfaceInfo)(nil), "echopb.openstack.IfaceInfo")
	proto.RegisterType((*GatewayInfo)(nil), "echopb.openstack.GatewayInfo")
	proto.RegisterType((*OpenstackNeutronLandscapeReqRespData)(nil), "echopb.openstack.OpenstackNeutronLandscapeReqRespData")
	proto.RegisterType((*OpenstackNeutronNetRequestData)(nil), "echopb.openstack.OpenstackNeutronNetRequestData")
	proto.RegisterType((*OpenstackNeutronNetResponseData)(nil), "echopb.openstack.OpenstackNeutronNetResponseData")
	proto.RegisterType((*ConsoleResourceRequestData)(nil), "echopb.openstack.ConsoleResourceRequestData")
	proto.RegisterType((*ConsoleResourceResponseData)(nil), "echopb.openstack.ConsoleResourceResponseData")
	proto.RegisterType((*TraineeDroneRequestData)(nil), "echopb.openstack.TraineeDroneRequestData")
	proto.RegisterType((*TraineeDroneResponseData)(nil), "echopb.openstack.TraineeDroneResponseData")
	proto.RegisterType((*DefensiveDroneRequestData)(nil), "echopb.openstack.DefensiveDroneRequestData")
	proto.RegisterType((*DefensiveDroneResponseData)(nil), "echopb.openstack.DefensiveDroneResponseData")
	proto.RegisterType((*TokenReqRespData)(nil), "echopb.openstack.TokenReqRespData")
	proto.RegisterType((*LibvirtDomainInfo)(nil), "echopb.openstack.LibvirtDomainInfo")
	proto.RegisterType((*LibvirtDomainReqRespData)(nil), "echopb.openstack.LibvirtDomainReqRespData")
	proto.RegisterType((*PhsicalLayerInfo)(nil), "echopb.openstack.PhsicalLayerInfo")
	proto.RegisterType((*LinkLayerInfo)(nil), "echopb.openstack.LinkLayerInfo")
	proto.RegisterType((*NetLayerInfo)(nil), "echopb.openstack.NetLayerInfo")
	proto.RegisterType((*TransLayerInfo)(nil), "echopb.openstack.TransLayerInfo")
	proto.RegisterType((*InternetModel)(nil), "echopb.openstack.InternetModel")
	proto.RegisterType((*OSILayersReqRespData)(nil), "echopb.openstack.OSILayersReqRespData")
}
func (m *IdNamePair) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IdNamePair) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintData(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintData(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *NetworkDiscoveryReqRespData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkDiscoveryReqRespData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Status) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintData(dAtA, i, uint64(len(m.Status)))
		i += copy(dAtA[i:], m.Status)
	}
	if len(m.Networks) > 0 {
		for _, msg := range m.Networks {
			dAtA[i] = 0x12
			i++
			i = encodeVarintData(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SubnetDiscoveryReqRespData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubnetDiscoveryReqRespData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.NetworkId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintData(dAtA, i, uint64(len(m.NetworkId)))
		i += copy(dAtA[i:], m.NetworkId)
	}
	if len(m.Subnets) > 0 {
		for _, msg := range m.Subnets {
			dAtA[i] = 0x12
			i++
			i = encodeVarintData(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *NetworkTopologyReqRespData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkTopologyReqRespData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.FloatingNetworkId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintData(dAtA, i, uint64(len(m.FloatingNetworkId)))
		i += copy(dAtA[i:], m.FloatingNetworkId)
	}
	if len(m.Information) > 0 {
		for _, msg := range m.Information {
			dAtA[i] = 0x12
			i++
			i = encodeVarintData(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ImageDiscoveryReqRespData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImageDiscoveryReqRespData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Status) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintData(dAtA, i, uint64(len(m.Status)))
		i += copy(dAtA[i:], m.Status)
	}
	if len(m.Visibility) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintData(dAtA, i, uint64(len(m.Visibility)))
		i += copy(dAtA[i:], m.Visibility)
	}
	if len(m.MemberStatus) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintData(dAtA, i, uint64(len(m.MemberStatus)))
		i += copy(dAtA[i:], m.MemberStatus)
	}
	if len(m.Images) > 0 {
		for _, msg := range m.Images {
			dAtA[i] = 0x22
			i++
			i = encodeVarintData(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *FlavorDiscoveryReqRespData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlavorDiscoveryReqRespData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AccessType) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintData(dAtA, i, uint64(len(m.AccessType)))
		i += copy(dAtA[i:], m.AccessType)
	}
	if len(m.Flavors) > 0 {
		for _, msg := range m.Flavors {
			dAtA[i] = 0x12
			i++
			i = encodeVarintData(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MachineSpawnsReqRespData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MachineSpawnsReqRespData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Vms) > 0 {
		for _, msg := range m.Vms {
			dAtA[i] = 0xa
			i++
			i = encodeVarintData(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MachineDiscoveryReqRespData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MachineDiscoveryReqRespData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Status) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintData(dAtA, i, uint64(len(m.Status)))
		i += copy(dAtA[i:], m.Status)
	}
	if len(m.Vms) > 0 {
		for _, msg := range m.Vms {
			dAtA[i] = 0x12
			i++
			i = encodeVarintData(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MachineDestroyReqRespData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MachineDestroyReqRespData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Vms) > 0 {
		for _, msg := range m.Vms {
			dAtA[i] = 0xa
			i++
			i = encodeVarintData(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.StateCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintData(dAtA, i, uint64(m.StateCode))
	}
	if len(m.StateMessage) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintData(dAtA, i, uint64(len(m.StateMessage)))
		i += copy(dAtA[i:], m.StateMessage)
	}
	return i, nil
}

func (m *MachineRebootReqRespData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MachineRebootReqRespData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Vms) > 0 {
		for _, msg := range m.Vms {
			dAtA[i] = 0xa
			i++
			i = encodeVarintData(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.StateCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintData(dAtA, i, uint64(m.StateCode))
	}
	if len(m.StateMessage) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintData(dAtA, i, uint64(len(m.StateMessage)))
		i += copy(dAtA[i:], m.StateMessage)
	}
	return i, nil
}

func (m *Flavor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Flavor) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintData(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.Disk != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintData(dAtA, i, uint64(m.Disk))
	}
	if m.Ram != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintData(dAtA, i, uint64(m.Ram))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintData(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.RxtxFactor != 0 {
		dAtA[i] = 0x29
		i++
		i = encodeFixed64Data(dAtA, i, uint64(math.Float64bits(float64(m.RxtxFactor))))
	}
	if m.Swap != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintData(dAtA, i, uint64(m.Swap))
	}
	if m.Vcpus != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintData(dAtA, i, uint64(m.Vcpus))
	}
	if m.IsPublic {
		dAtA[i] = 0x40
		i++
		if m.IsPublic {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *OpenstackNovaBootReqRespData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OpenstackNovaBootReqRespData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.FlavorId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintData(dAtA, i, uint64(len(m.FlavorId)))
		i += copy(dAtA[i:], m.FlavorId)
	}
	if len(m.FlavorName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintData(dAtA, i, uint64(len(m.FlavorName)))
		i += copy(dAtA[i:], m.FlavorName)
	}
	if len(m.ImageId) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintData(dAtA, i, uint64(len(m.ImageId)))
		i += copy(dAtA[i:], m.ImageId)
	}
	if len(m.ImageName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintData(dAtA, i, uint64(len(m.ImageName)))
		i += copy(dAtA[i:], m.ImageName)
	}
	if m.MinCount != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintData(dAtA, i, uint64(m.MinCount))
	}
	if m.MaxCount != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintData(dAtA, i, uint64(m.MaxCount))
	}
	if len(m.SecgroupsInfo) > 0 {
		for _, msg := range m.SecgroupsInfo {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintData(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.UserData) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintData(dAtA, i, uint64(len(m.UserData)))
		i += copy(dAtA[i:], m.UserData)
	}
	if len(m.NetworkId) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintData(dAtA, i, uint64(len(m.NetworkId)))
		i += copy(dAtA[i:], m.NetworkId)
	}
	if len(m.NetworkName) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintData(dAtA, i, uint64(len(m.NetworkName)))
		i += copy(dAtA[i:], m.NetworkName)
	}
	if len(m.FloatingNetworkId) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintData(dAtA, i, uint64(len(m.FloatingNetworkId)))
		i += copy(dAtA[i:], m.FloatingNetworkId)
	}
	if len(m.FloatingNetworkName) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintData(dAtA, i, uint64(len(m.FloatingNetworkName)))
		i += copy(dAtA[i:], m.FloatingNetworkName)
	}
	if len(m.Personality) > 0 {
		for _, msg := range m.Personality {
			dAtA[i] = 0x6a
			i++
			i = encodeVarintData(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.StateCode != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintData(dAtA, i, uint64(m.StateCode))
	}
	if len(m.StateMessage) > 0 {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintData(dAtA, i, uint64(len(m.StateMessage)))
		i += copy(dAtA[i:], m.StateMessage)
	}
	if len(m.Ports) > 0 {
		for _, msg := range m.Ports {
			dAtA[i] = 0x82
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintData(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Servers) > 0 {
		for _, msg := range m.Servers {
			dAtA[i] = 0x8a
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintData(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.FloatingIps) > 0 {
		for _, msg := range m.FloatingIps {
			dAtA[i] = 0x92
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintData(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.PortServerPairs) > 0 {
		for k, _ := range m.PortServerPairs {
			dAtA[i] = 0x9a
			i++
			dAtA[i] = 0x1
			i++
			v := m.PortServerPairs[k]
			mapSize := 1 + len(k) + sovData(uint64(len(k))) + 1 + len(v) + sovData(uint64(len(v)))
			i = encodeVarintData(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintData(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintData(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if len(m.FipServerPairs) > 0 {
		for k, _ := range m.FipServerPairs {
			dAtA[i] = 0xa2
			i++
			dAtA[i] = 0x1
			i++
			v := m.FipServerPairs[k]
			mapSize := 1 + len(k) + sovData(uint64(len(k))) + 1 + len(v) + sovData(uint64(len(v)))
			i = encodeVarintData(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintData(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintData(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if len(m.NamePrefix) > 0 {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintData(dAtA, i, uint64(len(m.NamePrefix)))
		i += copy(dAtA[i:], m.NamePrefix)
	}
	return i, nil
}

func (m *SecGroupInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SecGroupInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintData(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintData(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *IfaceInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IfaceInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RouterId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintData(dAtA, i, uint64(len(m.RouterId)))
		i += copy(dAtA[i:], m.RouterId)
	}
	if len(m.RouterName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintData(dAtA, i, uint64(len(m.RouterName)))
		i += copy(dAtA[i:], m.RouterName)
	}
	if len(m.NetworkId) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintData(dAtA, i, uint64(len(m.NetworkId)))
		i += copy(dAtA[i:], m.NetworkId)
	}
	if len(m.NetworkName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintData(dAtA, i, uint64(len(m.NetworkName)))
		i += copy(dAtA[i:], m.NetworkName)
	}
	if len(m.SubnetId) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintData(dAtA, i, uint64(len(m.SubnetId)))
		i += copy(dAtA[i:], m.SubnetId)
	}
	if len(m.SubnetName) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintData(dAtA, i, uint64(len(m.SubnetName)))
		i += copy(dAtA[i:], m.SubnetName)
	}
	if len(m.SecgroupsInfo) > 0 {
		for _, msg := range m.SecgroupsInfo {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintData(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.PortId) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintData(dAtA, i, uint64(len(m.PortId)))
		i += copy(dAtA[i:], m.PortId)
	}
	if len(m.PortName) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintData(dAtA, i, uint64(len(m.PortName)))
		i += copy(dAtA[i:], m.PortName)
	}
	if len(m.InterfaceInfoId) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintData(dAtA, i, uint64(len(m.InterfaceInfoId)))
		i += copy(dAtA[i:], m.InterfaceInfoId)
	}
	return i, nil
}

func (m *GatewayInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GatewayInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.NetworkId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintData(dAtA, i, uint64(len(m.NetworkId)))
		i += copy(dAtA[i:], m.NetworkId)
	}
	if len(m.NetworkName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintData(dAtA, i, uint64(len(m.NetworkName)))
		i += copy(dAtA[i:], m.NetworkName)
	}
	if len(m.RouterId) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintData(dAtA, i, uint64(len(m.RouterId)))
		i += copy(dAtA[i:], m.RouterId)
	}
	if len(m.RouterName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintData(dAtA, i, uint64(len(m.RouterName)))
		i += copy(dAtA[i:], m.RouterName)
	}
	return i, nil
}

func (m *OpenstackNeutronLandscapeReqRespData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OpenstackNeutronLandscapeReqRespData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Vnets) > 0 {
		for _, msg := range m.Vnets {
			dAtA[i] = 0xa
			i++
			i = encodeVarintData(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Vrouter != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintData(dAtA, i, uint64(m.Vrouter.Size()))
		n1, err := m.Vrouter.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Secgroup != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintData(dAtA, i, uint64(m.Secgroup.Size()))
		n2, err := m.Secgroup.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.IfacesInfo) > 0 {
		for _, msg := range m.IfacesInfo {
			dAtA[i] = 0x22
			i++
			i = encodeVarintData(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.GatewaysInfo) > 0 {
		for _, msg := range m.GatewaysInfo {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintData(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.StateCode != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintData(dAtA, i, uint64(m.StateCode))
	}
	if len(m.StateMessage) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintData(dAtA, i, uint64(len(m.StateMessage)))
		i += copy(dAtA[i:], m.StateMessage)
	}
	if len(m.Ports) > 0 {
		for _, msg := range m.Ports {
			dAtA[i] = 0x42
			i++
			i = encodeVarintData(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.InterfacesInfo) > 0 {
		for _, msg := range m.InterfacesInfo {
			dAtA[i] = 0x4a
			i++
			i = encodeVarintData(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *OpenstackNeutronNetRequestData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OpenstackNeutronNetRequestData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintData(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintData(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Router != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintData(dAtA, i, uint64(m.Router.Size()))
		n3, err := m.Router.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.Network != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintData(dAtA, i, uint64(m.Network.Size()))
		n4, err := m.Network.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *OpenstackNeutronNetResponseData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OpenstackNeutronNetResponseData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintData(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintData(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Router != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintData(dAtA, i, uint64(m.Router.Size()))
		n5, err := m.Router.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.Network != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintData(dAtA, i, uint64(m.Network.Size()))
		n6, err := m.Network.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.InterfaceInfo != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintData(dAtA, i, uint64(m.InterfaceInfo.Size()))
		n7, err := m.InterfaceInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if len(m.GatewayNetworkId) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintData(dAtA, i, uint64(len(m.GatewayNetworkId)))
		i += copy(dAtA[i:], m.GatewayNetworkId)
	}
	return i, nil
}

func (m *ConsoleResourceRequestData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsoleResourceRequestData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintData(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintData(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *ConsoleResourceResponseData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsoleResourceResponseData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintData(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintData(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *TraineeDroneRequestData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TraineeDroneRequestData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintData(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintData(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *TraineeDroneResponseData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TraineeDroneResponseData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintData(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintData(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *DefensiveDroneRequestData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DefensiveDroneRequestData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintData(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintData(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *DefensiveDroneResponseData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DefensiveDroneResponseData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintData(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintData(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *TokenReqRespData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TokenReqRespData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Src != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintData(dAtA, i, uint64(m.Src.Size()))
		n8, err := m.Src.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.Tgt != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintData(dAtA, i, uint64(m.Tgt.Size()))
		n9, err := m.Tgt.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}

func (m *LibvirtDomainInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LibvirtDomainInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintData(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintData(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Uuid) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintData(dAtA, i, uint64(len(m.Uuid)))
		i += copy(dAtA[i:], m.Uuid)
	}
	if len(m.Display) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintData(dAtA, i, uint64(len(m.Display)))
		i += copy(dAtA[i:], m.Display)
	}
	return i, nil
}

func (m *LibvirtDomainReqRespData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LibvirtDomainReqRespData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ServerId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintData(dAtA, i, uint64(len(m.ServerId)))
		i += copy(dAtA[i:], m.ServerId)
	}
	if m.StateCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintData(dAtA, i, uint64(m.StateCode))
	}
	if len(m.StateMessage) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintData(dAtA, i, uint64(len(m.StateMessage)))
		i += copy(dAtA[i:], m.StateMessage)
	}
	if m.DomainInfo != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintData(dAtA, i, uint64(m.DomainInfo.Size()))
		n10, err := m.DomainInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}

func (m *PhsicalLayerInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PhsicalLayerInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintData(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	if len(m.Product) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintData(dAtA, i, uint64(len(m.Product)))
		i += copy(dAtA[i:], m.Product)
	}
	if len(m.Vender) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintData(dAtA, i, uint64(len(m.Vender)))
		i += copy(dAtA[i:], m.Vender)
	}
	if len(m.BusInfo) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintData(dAtA, i, uint64(len(m.BusInfo)))
		i += copy(dAtA[i:], m.BusInfo)
	}
	if len(m.LogicalName) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintData(dAtA, i, uint64(len(m.LogicalName)))
		i += copy(dAtA[i:], m.LogicalName)
	}
	if len(m.Version) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintData(dAtA, i, uint64(len(m.Version)))
		i += copy(dAtA[i:], m.Version)
	}
	if len(m.Serial) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintData(dAtA, i, uint64(len(m.Serial)))
		i += copy(dAtA[i:], m.Serial)
	}
	if len(m.Configuration) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintData(dAtA, i, uint64(len(m.Configuration)))
		i += copy(dAtA[i:], m.Configuration)
	}
	if len(m.Resources) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintData(dAtA, i, uint64(len(m.Resources)))
		i += copy(dAtA[i:], m.Resources)
	}
	return i, nil
}

func (m *LinkLayerInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LinkLayerInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.InterfaceName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintData(dAtA, i, uint64(len(m.InterfaceName)))
		i += copy(dAtA[i:], m.InterfaceName)
	}
	if len(m.InterfaceType) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintData(dAtA, i, uint64(len(m.InterfaceType)))
		i += copy(dAtA[i:], m.InterfaceType)
	}
	if m.Numtxqueues != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintData(dAtA, i, uint64(m.Numtxqueues))
	}
	if m.Numrxqueues != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintData(dAtA, i, uint64(m.Numrxqueues))
	}
	if m.Index != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintData(dAtA, i, uint64(m.Index))
	}
	return i, nil
}

func (m *NetLayerInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetLayerInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Layer1 != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintData(dAtA, i, uint64(m.Layer1.Size()))
		n11, err := m.Layer1.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if len(m.IpV4) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintData(dAtA, i, uint64(len(m.IpV4)))
		i += copy(dAtA[i:], m.IpV4)
	}
	return i, nil
}

func (m *TransLayerInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransLayerInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Layer2 != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintData(dAtA, i, uint64(m.Layer2.Size()))
		n12, err := m.Layer2.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if len(m.Protocol) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintData(dAtA, i, uint64(len(m.Protocol)))
		i += copy(dAtA[i:], m.Protocol)
	}
	if len(m.SrcIp) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintData(dAtA, i, uint64(len(m.SrcIp)))
		i += copy(dAtA[i:], m.SrcIp)
	}
	if len(m.DstIp) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintData(dAtA, i, uint64(len(m.DstIp)))
		i += copy(dAtA[i:], m.DstIp)
	}
	return i, nil
}

func (m *InternetModel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InternetModel) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AuthenticationHeaderProtocol) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintData(dAtA, i, uint64(len(m.AuthenticationHeaderProtocol)))
		i += copy(dAtA[i:], m.AuthenticationHeaderProtocol)
	}
	if len(m.EncapsulationSecurityPayloadProtocol) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintData(dAtA, i, uint64(len(m.EncapsulationSecurityPayloadProtocol)))
		i += copy(dAtA[i:], m.EncapsulationSecurityPayloadProtocol)
	}
	return i, nil
}

func (m *OSILayersReqRespData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OSILayersReqRespData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Layer2 != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintData(dAtA, i, uint64(m.Layer2.Size()))
		n13, err := m.Layer2.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if m.StateCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintData(dAtA, i, uint64(m.StateCode))
	}
	if len(m.StateMessage) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintData(dAtA, i, uint64(len(m.StateMessage)))
		i += copy(dAtA[i:], m.StateMessage)
	}
	if len(m.ApplicationContent) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintData(dAtA, i, uint64(len(m.ApplicationContent)))
		i += copy(dAtA[i:], m.ApplicationContent)
	}
	return i, nil
}

func encodeFixed64Data(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Data(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintData(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *IdNamePair) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	return n
}

func (m *NetworkDiscoveryReqRespData) Size() (n int) {
	var l int
	_ = l
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	if len(m.Networks) > 0 {
		for _, e := range m.Networks {
			l = e.Size()
			n += 1 + l + sovData(uint64(l))
		}
	}
	return n
}

func (m *SubnetDiscoveryReqRespData) Size() (n int) {
	var l int
	_ = l
	l = len(m.NetworkId)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	if len(m.Subnets) > 0 {
		for _, e := range m.Subnets {
			l = e.Size()
			n += 1 + l + sovData(uint64(l))
		}
	}
	return n
}

func (m *NetworkTopologyReqRespData) Size() (n int) {
	var l int
	_ = l
	l = len(m.FloatingNetworkId)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	if len(m.Information) > 0 {
		for _, e := range m.Information {
			l = e.Size()
			n += 1 + l + sovData(uint64(l))
		}
	}
	return n
}

func (m *ImageDiscoveryReqRespData) Size() (n int) {
	var l int
	_ = l
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	l = len(m.Visibility)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	l = len(m.MemberStatus)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	if len(m.Images) > 0 {
		for _, e := range m.Images {
			l = e.Size()
			n += 1 + l + sovData(uint64(l))
		}
	}
	return n
}

func (m *FlavorDiscoveryReqRespData) Size() (n int) {
	var l int
	_ = l
	l = len(m.AccessType)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	if len(m.Flavors) > 0 {
		for _, e := range m.Flavors {
			l = e.Size()
			n += 1 + l + sovData(uint64(l))
		}
	}
	return n
}

func (m *MachineSpawnsReqRespData) Size() (n int) {
	var l int
	_ = l
	if len(m.Vms) > 0 {
		for _, e := range m.Vms {
			l = e.Size()
			n += 1 + l + sovData(uint64(l))
		}
	}
	return n
}

func (m *MachineDiscoveryReqRespData) Size() (n int) {
	var l int
	_ = l
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	if len(m.Vms) > 0 {
		for _, e := range m.Vms {
			l = e.Size()
			n += 1 + l + sovData(uint64(l))
		}
	}
	return n
}

func (m *MachineDestroyReqRespData) Size() (n int) {
	var l int
	_ = l
	if len(m.Vms) > 0 {
		for _, e := range m.Vms {
			l = e.Size()
			n += 1 + l + sovData(uint64(l))
		}
	}
	if m.StateCode != 0 {
		n += 1 + sovData(uint64(m.StateCode))
	}
	l = len(m.StateMessage)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	return n
}

func (m *MachineRebootReqRespData) Size() (n int) {
	var l int
	_ = l
	if len(m.Vms) > 0 {
		for _, e := range m.Vms {
			l = e.Size()
			n += 1 + l + sovData(uint64(l))
		}
	}
	if m.StateCode != 0 {
		n += 1 + sovData(uint64(m.StateCode))
	}
	l = len(m.StateMessage)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	return n
}

func (m *Flavor) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	if m.Disk != 0 {
		n += 1 + sovData(uint64(m.Disk))
	}
	if m.Ram != 0 {
		n += 1 + sovData(uint64(m.Ram))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	if m.RxtxFactor != 0 {
		n += 9
	}
	if m.Swap != 0 {
		n += 1 + sovData(uint64(m.Swap))
	}
	if m.Vcpus != 0 {
		n += 1 + sovData(uint64(m.Vcpus))
	}
	if m.IsPublic {
		n += 2
	}
	return n
}

func (m *OpenstackNovaBootReqRespData) Size() (n int) {
	var l int
	_ = l
	l = len(m.FlavorId)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	l = len(m.FlavorName)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	l = len(m.ImageId)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	l = len(m.ImageName)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	if m.MinCount != 0 {
		n += 1 + sovData(uint64(m.MinCount))
	}
	if m.MaxCount != 0 {
		n += 1 + sovData(uint64(m.MaxCount))
	}
	if len(m.SecgroupsInfo) > 0 {
		for _, e := range m.SecgroupsInfo {
			l = e.Size()
			n += 1 + l + sovData(uint64(l))
		}
	}
	l = len(m.UserData)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	l = len(m.NetworkId)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	l = len(m.NetworkName)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	l = len(m.FloatingNetworkId)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	l = len(m.FloatingNetworkName)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	if len(m.Personality) > 0 {
		for _, e := range m.Personality {
			l = e.Size()
			n += 1 + l + sovData(uint64(l))
		}
	}
	if m.StateCode != 0 {
		n += 1 + sovData(uint64(m.StateCode))
	}
	l = len(m.StateMessage)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	if len(m.Ports) > 0 {
		for _, e := range m.Ports {
			l = e.Size()
			n += 2 + l + sovData(uint64(l))
		}
	}
	if len(m.Servers) > 0 {
		for _, e := range m.Servers {
			l = e.Size()
			n += 2 + l + sovData(uint64(l))
		}
	}
	if len(m.FloatingIps) > 0 {
		for _, e := range m.FloatingIps {
			l = e.Size()
			n += 2 + l + sovData(uint64(l))
		}
	}
	if len(m.PortServerPairs) > 0 {
		for k, v := range m.PortServerPairs {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovData(uint64(len(k))) + 1 + len(v) + sovData(uint64(len(v)))
			n += mapEntrySize + 2 + sovData(uint64(mapEntrySize))
		}
	}
	if len(m.FipServerPairs) > 0 {
		for k, v := range m.FipServerPairs {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovData(uint64(len(k))) + 1 + len(v) + sovData(uint64(len(v)))
			n += mapEntrySize + 2 + sovData(uint64(mapEntrySize))
		}
	}
	l = len(m.NamePrefix)
	if l > 0 {
		n += 2 + l + sovData(uint64(l))
	}
	return n
}

func (m *SecGroupInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	return n
}

func (m *IfaceInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.RouterId)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	l = len(m.RouterName)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	l = len(m.NetworkId)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	l = len(m.NetworkName)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	l = len(m.SubnetId)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	l = len(m.SubnetName)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	if len(m.SecgroupsInfo) > 0 {
		for _, e := range m.SecgroupsInfo {
			l = e.Size()
			n += 1 + l + sovData(uint64(l))
		}
	}
	l = len(m.PortId)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	l = len(m.PortName)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	l = len(m.InterfaceInfoId)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	return n
}

func (m *GatewayInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.NetworkId)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	l = len(m.NetworkName)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	l = len(m.RouterId)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	l = len(m.RouterName)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	return n
}

func (m *OpenstackNeutronLandscapeReqRespData) Size() (n int) {
	var l int
	_ = l
	if len(m.Vnets) > 0 {
		for _, e := range m.Vnets {
			l = e.Size()
			n += 1 + l + sovData(uint64(l))
		}
	}
	if m.Vrouter != nil {
		l = m.Vrouter.Size()
		n += 1 + l + sovData(uint64(l))
	}
	if m.Secgroup != nil {
		l = m.Secgroup.Size()
		n += 1 + l + sovData(uint64(l))
	}
	if len(m.IfacesInfo) > 0 {
		for _, e := range m.IfacesInfo {
			l = e.Size()
			n += 1 + l + sovData(uint64(l))
		}
	}
	if len(m.GatewaysInfo) > 0 {
		for _, e := range m.GatewaysInfo {
			l = e.Size()
			n += 1 + l + sovData(uint64(l))
		}
	}
	if m.StateCode != 0 {
		n += 1 + sovData(uint64(m.StateCode))
	}
	l = len(m.StateMessage)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	if len(m.Ports) > 0 {
		for _, e := range m.Ports {
			l = e.Size()
			n += 1 + l + sovData(uint64(l))
		}
	}
	if len(m.InterfacesInfo) > 0 {
		for _, e := range m.InterfacesInfo {
			l = e.Size()
			n += 1 + l + sovData(uint64(l))
		}
	}
	return n
}

func (m *OpenstackNeutronNetRequestData) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	if m.Router != nil {
		l = m.Router.Size()
		n += 1 + l + sovData(uint64(l))
	}
	if m.Network != nil {
		l = m.Network.Size()
		n += 1 + l + sovData(uint64(l))
	}
	return n
}

func (m *OpenstackNeutronNetResponseData) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	if m.Router != nil {
		l = m.Router.Size()
		n += 1 + l + sovData(uint64(l))
	}
	if m.Network != nil {
		l = m.Network.Size()
		n += 1 + l + sovData(uint64(l))
	}
	if m.InterfaceInfo != nil {
		l = m.InterfaceInfo.Size()
		n += 1 + l + sovData(uint64(l))
	}
	l = len(m.GatewayNetworkId)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	return n
}

func (m *ConsoleResourceRequestData) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	return n
}

func (m *ConsoleResourceResponseData) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	return n
}

func (m *TraineeDroneRequestData) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	return n
}

func (m *TraineeDroneResponseData) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	return n
}

func (m *DefensiveDroneRequestData) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	return n
}

func (m *DefensiveDroneResponseData) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	return n
}

func (m *TokenReqRespData) Size() (n int) {
	var l int
	_ = l
	if m.Src != nil {
		l = m.Src.Size()
		n += 1 + l + sovData(uint64(l))
	}
	if m.Tgt != nil {
		l = m.Tgt.Size()
		n += 1 + l + sovData(uint64(l))
	}
	return n
}

func (m *LibvirtDomainInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	l = len(m.Uuid)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	l = len(m.Display)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	return n
}

func (m *LibvirtDomainReqRespData) Size() (n int) {
	var l int
	_ = l
	l = len(m.ServerId)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	if m.StateCode != 0 {
		n += 1 + sovData(uint64(m.StateCode))
	}
	l = len(m.StateMessage)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	if m.DomainInfo != nil {
		l = m.DomainInfo.Size()
		n += 1 + l + sovData(uint64(l))
	}
	return n
}

func (m *PhsicalLayerInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	l = len(m.Product)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	l = len(m.Vender)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	l = len(m.BusInfo)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	l = len(m.LogicalName)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	l = len(m.Serial)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	l = len(m.Configuration)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	l = len(m.Resources)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	return n
}

func (m *LinkLayerInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.InterfaceName)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	l = len(m.InterfaceType)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	if m.Numtxqueues != 0 {
		n += 1 + sovData(uint64(m.Numtxqueues))
	}
	if m.Numrxqueues != 0 {
		n += 1 + sovData(uint64(m.Numrxqueues))
	}
	if m.Index != 0 {
		n += 1 + sovData(uint64(m.Index))
	}
	return n
}

func (m *NetLayerInfo) Size() (n int) {
	var l int
	_ = l
	if m.Layer1 != nil {
		l = m.Layer1.Size()
		n += 1 + l + sovData(uint64(l))
	}
	l = len(m.IpV4)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	return n
}

func (m *TransLayerInfo) Size() (n int) {
	var l int
	_ = l
	if m.Layer2 != nil {
		l = m.Layer2.Size()
		n += 1 + l + sovData(uint64(l))
	}
	l = len(m.Protocol)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	l = len(m.SrcIp)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	l = len(m.DstIp)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	return n
}

func (m *InternetModel) Size() (n int) {
	var l int
	_ = l
	l = len(m.AuthenticationHeaderProtocol)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	l = len(m.EncapsulationSecurityPayloadProtocol)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	return n
}

func (m *OSILayersReqRespData) Size() (n int) {
	var l int
	_ = l
	if m.Layer2 != nil {
		l = m.Layer2.Size()
		n += 1 + l + sovData(uint64(l))
	}
	if m.StateCode != 0 {
		n += 1 + sovData(uint64(m.StateCode))
	}
	l = len(m.StateMessage)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	l = len(m.ApplicationContent)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	return n
}

func sovData(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozData(x uint64) (n int) {
	return sovData(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *IdNamePair) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IdNamePair: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IdNamePair: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkDiscoveryReqRespData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkDiscoveryReqRespData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkDiscoveryReqRespData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Networks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Networks = append(m.Networks, &echopb_openstack_neutron.Network{})
			if err := m.Networks[len(m.Networks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubnetDiscoveryReqRespData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubnetDiscoveryReqRespData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubnetDiscoveryReqRespData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetworkId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subnets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subnets = append(m.Subnets, &echopb_openstack_neutron.Subnet{})
			if err := m.Subnets[len(m.Subnets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkTopologyReqRespData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkTopologyReqRespData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkTopologyReqRespData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FloatingNetworkId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FloatingNetworkId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Information", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Information = append(m.Information, &OpenstackNeutronLandscapeReqRespData{})
			if err := m.Information[len(m.Information)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImageDiscoveryReqRespData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImageDiscoveryReqRespData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImageDiscoveryReqRespData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Visibility", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Visibility = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MemberStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Images", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Images = append(m.Images, &Image{})
			if err := m.Images[len(m.Images)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlavorDiscoveryReqRespData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlavorDiscoveryReqRespData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlavorDiscoveryReqRespData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flavors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Flavors = append(m.Flavors, &echopb_openstack_nova.Flavor{})
			if err := m.Flavors[len(m.Flavors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MachineSpawnsReqRespData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MachineSpawnsReqRespData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MachineSpawnsReqRespData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vms = append(m.Vms, &OpenstackNovaBootReqRespData{})
			if err := m.Vms[len(m.Vms)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MachineDiscoveryReqRespData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MachineDiscoveryReqRespData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MachineDiscoveryReqRespData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vms = append(m.Vms, &echopb_openstack_nova.Server{})
			if err := m.Vms[len(m.Vms)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MachineDestroyReqRespData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MachineDestroyReqRespData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MachineDestroyReqRespData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vms = append(m.Vms, &IdNamePair{})
			if err := m.Vms[len(m.Vms)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateCode", wireType)
			}
			m.StateCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StateCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MachineRebootReqRespData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MachineRebootReqRespData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MachineRebootReqRespData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vms = append(m.Vms, &IdNamePair{})
			if err := m.Vms[len(m.Vms)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateCode", wireType)
			}
			m.StateCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StateCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Flavor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Flavor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Flavor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disk", wireType)
			}
			m.Disk = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Disk |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ram", wireType)
			}
			m.Ram = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ram |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field RxtxFactor", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.RxtxFactor = float64(math.Float64frombits(v))
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Swap", wireType)
			}
			m.Swap = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Swap |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vcpus", wireType)
			}
			m.Vcpus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Vcpus |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPublic", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsPublic = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OpenstackNovaBootReqRespData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OpenstackNovaBootReqRespData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OpenstackNovaBootReqRespData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlavorId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FlavorId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlavorName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FlavorName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinCount", wireType)
			}
			m.MinCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxCount", wireType)
			}
			m.MaxCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecgroupsInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecgroupsInfo = append(m.SecgroupsInfo, &SecGroupInfo{})
			if err := m.SecgroupsInfo[len(m.SecgroupsInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserData = append(m.UserData[:0], dAtA[iNdEx:postIndex]...)
			if m.UserData == nil {
				m.UserData = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetworkId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetworkName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FloatingNetworkId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FloatingNetworkId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FloatingNetworkName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FloatingNetworkName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Personality", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Personality = append(m.Personality, &echopb_openstack_nova.File{})
			if err := m.Personality[len(m.Personality)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateCode", wireType)
			}
			m.StateCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StateCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ports", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ports = append(m.Ports, &echopb_openstack_neutron.Port{})
			if err := m.Ports[len(m.Ports)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Servers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Servers = append(m.Servers, &echopb_openstack_nova.Server{})
			if err := m.Servers[len(m.Servers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FloatingIps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FloatingIps = append(m.FloatingIps, &echopb_openstack_neutron.FloatingIP{})
			if err := m.FloatingIps[len(m.FloatingIps)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortServerPairs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthData
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(dAtA[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.PortServerPairs == nil {
				m.PortServerPairs = make(map[string]string)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowData
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var stringLenmapvalue uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowData
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLenmapvalue |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLenmapvalue := int(stringLenmapvalue)
				if intStringLenmapvalue < 0 {
					return ErrInvalidLengthData
				}
				postStringIndexmapvalue := iNdEx + intStringLenmapvalue
				if postStringIndexmapvalue > l {
					return io.ErrUnexpectedEOF
				}
				mapvalue := string(dAtA[iNdEx:postStringIndexmapvalue])
				iNdEx = postStringIndexmapvalue
				m.PortServerPairs[mapkey] = mapvalue
			} else {
				var mapvalue string
				m.PortServerPairs[mapkey] = mapvalue
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FipServerPairs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthData
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(dAtA[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.FipServerPairs == nil {
				m.FipServerPairs = make(map[string]string)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowData
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var stringLenmapvalue uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowData
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLenmapvalue |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLenmapvalue := int(stringLenmapvalue)
				if intStringLenmapvalue < 0 {
					return ErrInvalidLengthData
				}
				postStringIndexmapvalue := iNdEx + intStringLenmapvalue
				if postStringIndexmapvalue > l {
					return io.ErrUnexpectedEOF
				}
				mapvalue := string(dAtA[iNdEx:postStringIndexmapvalue])
				iNdEx = postStringIndexmapvalue
				m.FipServerPairs[mapkey] = mapvalue
			} else {
				var mapvalue string
				m.FipServerPairs[mapkey] = mapvalue
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NamePrefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NamePrefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SecGroupInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SecGroupInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SecGroupInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IfaceInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IfaceInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IfaceInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RouterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouterName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RouterName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetworkId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetworkName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubnetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubnetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubnetName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubnetName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecgroupsInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecgroupsInfo = append(m.SecgroupsInfo, &SecGroupInfo{})
			if err := m.SecgroupsInfo[len(m.SecgroupsInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PortId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PortName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterfaceInfoId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InterfaceInfoId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GatewayInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GatewayInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GatewayInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetworkId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetworkName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RouterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouterName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RouterName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OpenstackNeutronLandscapeReqRespData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OpenstackNeutronLandscapeReqRespData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OpenstackNeutronLandscapeReqRespData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vnets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vnets = append(m.Vnets, &echopb_openstack_neutron.Network{})
			if err := m.Vnets[len(m.Vnets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vrouter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Vrouter == nil {
				m.Vrouter = &echopb_openstack_neutron.Router{}
			}
			if err := m.Vrouter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Secgroup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Secgroup == nil {
				m.Secgroup = &echopb_openstack_neutron.SecGroup{}
			}
			if err := m.Secgroup.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IfacesInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IfacesInfo = append(m.IfacesInfo, &IfaceInfo{})
			if err := m.IfacesInfo[len(m.IfacesInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewaysInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GatewaysInfo = append(m.GatewaysInfo, &GatewayInfo{})
			if err := m.GatewaysInfo[len(m.GatewaysInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateCode", wireType)
			}
			m.StateCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StateCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ports", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ports = append(m.Ports, &echopb_openstack_neutron.Port{})
			if err := m.Ports[len(m.Ports)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterfacesInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InterfacesInfo = append(m.InterfacesInfo, &echopb_openstack_neutron.InterfaceInfo{})
			if err := m.InterfacesInfo[len(m.InterfacesInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OpenstackNeutronNetRequestData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OpenstackNeutronNetRequestData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OpenstackNeutronNetRequestData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Router", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Router == nil {
				m.Router = &echopb_openstack_neutron.Router{}
			}
			if err := m.Router.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Network == nil {
				m.Network = &echopb_openstack_neutron.Network{}
			}
			if err := m.Network.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OpenstackNeutronNetResponseData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OpenstackNeutronNetResponseData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OpenstackNeutronNetResponseData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Router", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Router == nil {
				m.Router = &echopb_openstack_neutron.Router{}
			}
			if err := m.Router.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Network == nil {
				m.Network = &echopb_openstack_neutron.Network{}
			}
			if err := m.Network.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterfaceInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InterfaceInfo == nil {
				m.InterfaceInfo = &echopb_openstack_neutron.InterfaceInfo{}
			}
			if err := m.InterfaceInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayNetworkId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GatewayNetworkId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsoleResourceRequestData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsoleResourceRequestData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsoleResourceRequestData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsoleResourceResponseData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsoleResourceResponseData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsoleResourceResponseData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TraineeDroneRequestData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TraineeDroneRequestData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TraineeDroneRequestData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TraineeDroneResponseData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TraineeDroneResponseData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TraineeDroneResponseData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DefensiveDroneRequestData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DefensiveDroneRequestData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DefensiveDroneRequestData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DefensiveDroneResponseData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DefensiveDroneResponseData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DefensiveDroneResponseData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TokenReqRespData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TokenReqRespData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TokenReqRespData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Src", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Src == nil {
				m.Src = &echopb_openstack_identity.TokenCredentialsV2{}
			}
			if err := m.Src.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tgt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tgt == nil {
				m.Tgt = &echopb_openstack_identity.Token{}
			}
			if err := m.Tgt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LibvirtDomainInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LibvirtDomainInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LibvirtDomainInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Display", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Display = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LibvirtDomainReqRespData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LibvirtDomainReqRespData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LibvirtDomainReqRespData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateCode", wireType)
			}
			m.StateCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StateCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DomainInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DomainInfo == nil {
				m.DomainInfo = &LibvirtDomainInfo{}
			}
			if err := m.DomainInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PhsicalLayerInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PhsicalLayerInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PhsicalLayerInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Product", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Product = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BusInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BusInfo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogicalName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogicalName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Serial", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Serial = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Configuration", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Configuration = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resources", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Resources = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LinkLayerInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LinkLayerInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LinkLayerInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterfaceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InterfaceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterfaceType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InterfaceType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Numtxqueues", wireType)
			}
			m.Numtxqueues = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Numtxqueues |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Numrxqueues", wireType)
			}
			m.Numrxqueues = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Numrxqueues |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetLayerInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetLayerInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetLayerInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Layer1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Layer1 == nil {
				m.Layer1 = &LinkLayerInfo{}
			}
			if err := m.Layer1.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpV4", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IpV4 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransLayerInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransLayerInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransLayerInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Layer2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Layer2 == nil {
				m.Layer2 = &NetLayerInfo{}
			}
			if err := m.Layer2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Protocol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DstIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InternetModel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InternetModel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InternetModel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthenticationHeaderProtocol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthenticationHeaderProtocol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncapsulationSecurityPayloadProtocol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncapsulationSecurityPayloadProtocol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OSILayersReqRespData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OSILayersReqRespData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OSILayersReqRespData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Layer2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Layer2 == nil {
				m.Layer2 = &NetLayerInfo{}
			}
			if err := m.Layer2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateCode", wireType)
			}
			m.StateCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StateCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationContent", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApplicationContent = append(m.ApplicationContent[:0], dAtA[iNdEx:postIndex]...)
			if m.ApplicationContent == nil {
				m.ApplicationContent = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipData(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowData
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthData
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowData
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipData(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthData = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowData   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("openstack/data.proto", fileDescriptorData) }

var fileDescriptorData = []byte{
	// 2034 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x58, 0x4d, 0x6f, 0x1b, 0xc7,
	0x19, 0xee, 0x52, 0xe2, 0xd7, 0x4b, 0x4a, 0x91, 0x57, 0x76, 0x4c, 0x53, 0x8e, 0x2c, 0x6f, 0x5c,
	0xc4, 0x28, 0x5a, 0xb9, 0x55, 0x8d, 0x38, 0x48, 0xeb, 0xc4, 0xb1, 0x14, 0xbb, 0x04, 0x6c, 0x45,
	0x58, 0xb9, 0x41, 0x0f, 0x01, 0x88, 0xe1, 0xee, 0x50, 0x1a, 0x68, 0xb9, 0xb3, 0x99, 0x99, 0xa5,
	0xc4, 0x5f, 0xd0, 0x53, 0x5b, 0xa0, 0xa7, 0xa2, 0xe8, 0xb9, 0x40, 0x80, 0xde, 0x0b, 0xa4, 0xa7,
	0xa2, 0x97, 0x1e, 0xfb, 0x13, 0x0a, 0xf7, 0x1f, 0xf4, 0x17, 0x14, 0xf3, 0xce, 0xec, 0x72, 0xf9,
	0x25, 0x8b, 0x69, 0x80, 0xf6, 0x42, 0xee, 0xbc, 0xdf, 0xf3, 0x7e, 0x3c, 0x33, 0xbb, 0x70, 0x9d,
	0x27, 0x34, 0x96, 0x8a, 0x04, 0x67, 0x0f, 0x42, 0xa2, 0xc8, 0x6e, 0x22, 0xb8, 0xe2, 0xee, 0x06,
	0x0d, 0x4e, 0x79, 0xd2, 0xdb, 0xcd, 0x99, 0xed, 0x3b, 0x63, 0xb9, 0x98, 0xa6, 0x4a, 0xf0, 0x38,
	0xfb, 0x37, 0x2a, 0xed, 0x5b, 0x05, 0x01, 0x3e, 0x24, 0xf8, 0x63, 0x59, 0x77, 0xc7, 0x2c, 0x16,
	0xd2, 0x58, 0x31, 0x35, 0xca, 0x1f, 0xac, 0xc8, 0x8d, 0x82, 0xc8, 0x80, 0x9c, 0x50, 0x43, 0xf6,
	0x7e, 0x08, 0xd0, 0x09, 0x0f, 0xc9, 0x80, 0x1e, 0x11, 0x26, 0xdc, 0x75, 0x28, 0xb1, 0xb0, 0xe5,
	0xec, 0x38, 0xf7, 0xeb, 0x7e, 0x89, 0x85, 0xae, 0x0b, 0xab, 0x31, 0x19, 0xd0, 0x56, 0x09, 0x29,
	0xf8, 0xec, 0x29, 0xd8, 0x3a, 0xa4, 0xea, 0x9c, 0x8b, 0xb3, 0x03, 0x26, 0x03, 0x3e, 0xa4, 0x62,
	0xe4, 0xd3, 0x2f, 0x7d, 0x2a, 0x93, 0x03, 0xa2, 0x88, 0xfb, 0x36, 0x54, 0xa4, 0x22, 0x2a, 0x95,
	0xd6, 0x8c, 0x5d, 0xb9, 0x8f, 0xa1, 0x16, 0x1b, 0x35, 0xd9, 0x2a, 0xed, 0xac, 0xdc, 0x6f, 0xec,
	0xdd, 0xdd, 0x9d, 0xce, 0xc1, 0x6e, 0xb6, 0x61, 0xeb, 0xc0, 0xcf, 0x55, 0xbc, 0x73, 0x68, 0x1f,
	0xa7, 0xbd, 0x98, 0xaa, 0xb9, 0x4e, 0xdf, 0x01, 0xb0, 0x92, 0xdd, 0x3c, 0xfe, 0xba, 0xa5, 0x74,
	0x42, 0xf7, 0x43, 0xa8, 0x4a, 0x54, 0xce, 0x5c, 0xef, 0x2c, 0x76, 0x6d, 0xbc, 0xf8, 0x99, 0x82,
	0xf7, 0x47, 0x07, 0xda, 0x36, 0x9c, 0x57, 0x3c, 0xe1, 0x11, 0x3f, 0x99, 0xf0, 0xbc, 0x0b, 0x9b,
	0xfd, 0x88, 0x13, 0xc5, 0xe2, 0x93, 0xee, 0x4c, 0x08, 0xd7, 0x32, 0xd6, 0x61, 0x1e, 0xca, 0x2f,
	0xa0, 0xc1, 0xe2, 0x3e, 0x17, 0x03, 0xa2, 0x18, 0x8f, 0x6d, 0x38, 0xef, 0xcf, 0x86, 0xf3, 0x59,
	0xf6, 0x74, 0x68, 0xe2, 0x7a, 0x41, 0xe2, 0x50, 0x06, 0x24, 0xa1, 0x05, 0xe7, 0x7e, 0xd1, 0x94,
	0xf7, 0x95, 0x03, 0xb7, 0x3a, 0xba, 0xb2, 0x4b, 0x95, 0x65, 0x1b, 0x60, 0xc8, 0x24, 0xeb, 0xb1,
	0x88, 0xa9, 0x91, 0xad, 0x73, 0x81, 0xe2, 0xbe, 0x0b, 0x6b, 0x03, 0x3a, 0xe8, 0x51, 0xd1, 0xb5,
	0xea, 0x2b, 0x28, 0xd2, 0x34, 0xc4, 0x63, 0x63, 0xe4, 0x01, 0x54, 0xb0, 0xa7, 0x64, 0x6b, 0x15,
	0xf7, 0x73, 0x73, 0x76, 0x3f, 0x18, 0x99, 0x6f, 0xc5, 0xbc, 0x21, 0xb4, 0x9f, 0x45, 0x64, 0xc8,
	0xc5, 0xdc, 0x58, 0xef, 0x40, 0x83, 0x04, 0x01, 0x95, 0xb2, 0xab, 0x46, 0x09, 0xb5, 0x01, 0x83,
	0x21, 0xbd, 0x1a, 0x25, 0xd4, 0x7d, 0x04, 0xd5, 0x3e, 0xaa, 0x67, 0xf5, 0x7c, 0x67, 0x4e, 0x3d,
	0xf5, 0x74, 0x18, 0x27, 0x7e, 0x26, 0xed, 0x7d, 0x01, 0xad, 0x97, 0x24, 0x38, 0x65, 0x31, 0x3d,
	0x4e, 0xc8, 0x79, 0x2c, 0x8b, 0x5e, 0x9f, 0xc0, 0xca, 0x70, 0xa0, 0xd3, 0xa3, 0x0d, 0xee, 0x5e,
	0x56, 0x11, 0x3e, 0x24, 0x4f, 0x39, 0x57, 0xc5, 0x4a, 0x68, 0x55, 0xaf, 0x0f, 0x5b, 0xd6, 0xfa,
	0x52, 0x25, 0x78, 0x60, 0x1c, 0x5f, 0xbe, 0x93, 0x63, 0x2a, 0x86, 0x54, 0x18, 0x3f, 0xbf, 0x71,
	0xe0, 0x56, 0xe6, 0x88, 0x4a, 0x25, 0xf8, 0x54, 0x47, 0x16, 0xf6, 0x71, 0x7b, 0x4e, 0x25, 0xf2,
	0x71, 0x47, 0x6b, 0x7a, 0x76, 0x74, 0x20, 0xb4, 0x1b, 0xf0, 0xd0, 0x4c, 0x7a, 0xd9, 0xaf, 0x23,
	0x65, 0x9f, 0x87, 0x54, 0x37, 0x80, 0x61, 0x0f, 0xa8, 0x94, 0xe4, 0x84, 0x66, 0x0d, 0x80, 0xc4,
	0x97, 0x86, 0xe6, 0xfd, 0xda, 0xc9, 0x13, 0xeb, 0xd3, 0xde, 0x64, 0x6e, 0xfe, 0x27, 0x01, 0x7d,
	0xed, 0x40, 0xc5, 0x14, 0x7f, 0x1e, 0xa6, 0x85, 0x4c, 0x9e, 0x59, 0xc3, 0xf8, 0xec, 0x6e, 0xc0,
	0x8a, 0x20, 0x03, 0xb4, 0x54, 0xf6, 0xf5, 0x63, 0x8e, 0x7c, 0xab, 0x63, 0xe4, 0xd3, 0x7d, 0x29,
	0x2e, 0xd4, 0x45, 0xb7, 0x4f, 0x02, 0xc5, 0x45, 0xab, 0xbc, 0xe3, 0xdc, 0x77, 0x7c, 0xd0, 0xa4,
	0x67, 0x48, 0xd1, 0x4a, 0xf2, 0x9c, 0x24, 0xad, 0x8a, 0x31, 0xad, 0x9f, 0xdd, 0xeb, 0x50, 0x1e,
	0x06, 0x49, 0x2a, 0x5b, 0x55, 0x24, 0x9a, 0x85, 0xbb, 0x05, 0x75, 0x26, 0xbb, 0x49, 0xda, 0x8b,
	0x58, 0xd0, 0xaa, 0xed, 0x38, 0xf7, 0x6b, 0x7e, 0x8d, 0xc9, 0x23, 0x5c, 0x7b, 0x7f, 0xa8, 0xc3,
	0xed, 0xcb, 0xba, 0x4d, 0x6b, 0x9b, 0x8e, 0x1e, 0x43, 0x4d, 0xcd, 0x10, 0x3a, 0xa1, 0x8e, 0xd2,
	0x32, 0x0b, 0xd0, 0x0d, 0x86, 0xa4, 0x13, 0xed, 0xde, 0x82, 0x1a, 0x8e, 0xa1, 0x56, 0x36, 0xb9,
	0xab, 0xe2, 0xba, 0x13, 0xea, 0xd4, 0x1b, 0x56, 0x61, 0xef, 0x75, 0xa4, 0xa0, 0xe6, 0x16, 0xd4,
	0x07, 0x2c, 0xee, 0x06, 0x3c, 0x8d, 0x15, 0x6e, 0xbf, 0xec, 0xd7, 0x06, 0x2c, 0xde, 0xd7, 0x6b,
	0x64, 0x92, 0x0b, 0xcb, 0xac, 0x58, 0x26, 0xb9, 0x30, 0xcc, 0x4f, 0x61, 0x5d, 0xd2, 0xe0, 0x44,
	0xf0, 0x34, 0x91, 0x5d, 0x8d, 0x5a, 0xad, 0x2a, 0xb6, 0xc3, 0xf6, 0x6c, 0x3b, 0x1c, 0xd3, 0xe0,
	0xb9, 0x96, 0xeb, 0xc4, 0x7d, 0xee, 0xaf, 0xe5, 0x5a, 0x7a, 0xa9, 0x7d, 0xa4, 0x92, 0x8a, 0xae,
	0x3e, 0x48, 0x31, 0x6d, 0x4d, 0xbf, 0xa6, 0x09, 0x73, 0x0e, 0x81, 0xfa, 0xf4, 0x21, 0x70, 0x17,
	0x9a, 0x19, 0x1b, 0x77, 0x07, 0x28, 0xd0, 0xb0, 0x34, 0xdc, 0xdf, 0x02, 0x30, 0x6f, 0x2c, 0x02,
	0xf3, 0x3d, 0xb8, 0x31, 0x23, 0x8f, 0xb6, 0x9b, 0xa8, 0xb1, 0x39, 0xa5, 0x81, 0x3e, 0x1e, 0x43,
	0x23, 0xa1, 0x42, 0xf2, 0x98, 0x20, 0xe2, 0xae, 0x61, 0x1a, 0xb6, 0x16, 0xe1, 0x17, 0x8b, 0xa8,
	0x5f, 0x94, 0x9f, 0x1a, 0x8e, 0xf5, 0x37, 0x0e, 0xc7, 0x5b, 0xb3, 0xc3, 0xe1, 0x3e, 0x84, 0x72,
	0xc2, 0x85, 0x92, 0xad, 0x8d, 0x45, 0x35, 0xc8, 0x0e, 0xc3, 0x23, 0x2e, 0x94, 0x6f, 0x84, 0x35,
	0xe8, 0x4a, 0x04, 0x21, 0xd9, 0xba, 0x76, 0x15, 0xa8, 0xca, 0xa4, 0xdd, 0xe7, 0xd0, 0xcc, 0xb3,
	0xc4, 0x12, 0xd9, 0x72, 0x51, 0xfb, 0xde, 0x62, 0xaf, 0xcf, 0xac, 0x74, 0xe7, 0xc8, 0x6f, 0x64,
	0x9a, 0x9d, 0x44, 0xba, 0x1c, 0xae, 0xe9, 0x50, 0xba, 0xc6, 0x70, 0x37, 0x21, 0x4c, 0xc8, 0xd6,
	0x26, 0x5a, 0xdb, 0x5f, 0x0e, 0xaf, 0x71, 0x63, 0x26, 0x4e, 0x8d, 0x3b, 0xf2, 0xd3, 0x58, 0x89,
	0x91, 0xff, 0x56, 0x32, 0x49, 0x75, 0x23, 0xd8, 0xe8, 0xb3, 0x64, 0xd2, 0xdf, 0x75, 0xf4, 0xf7,
	0x74, 0x49, 0x7f, 0xcf, 0x58, 0x32, 0xe3, 0x6e, 0xbd, 0x3f, 0x41, 0xd4, 0x83, 0xab, 0x9b, 0xa7,
	0x9b, 0x08, 0xda, 0x67, 0x17, 0xad, 0x1b, 0x66, 0x70, 0x35, 0xe9, 0x08, 0x29, 0xed, 0xa7, 0x70,
	0x7d, 0x5e, 0xdc, 0x1a, 0xbd, 0xce, 0xe8, 0xc8, 0x02, 0x81, 0x7e, 0x44, 0xd0, 0x21, 0x51, 0x9a,
	0x4d, 0xbf, 0x59, 0x7c, 0x58, 0xfa, 0xc0, 0x69, 0x7f, 0x02, 0x9b, 0x73, 0x62, 0x59, 0xc6, 0x84,
	0xb7, 0x07, 0xcd, 0xe2, 0x8c, 0x5e, 0xe9, 0xd2, 0xf8, 0xef, 0x12, 0xd4, 0x3b, 0x7d, 0x12, 0xd0,
	0x6c, 0x8c, 0x05, 0x4f, 0x15, 0x2d, 0xe2, 0x97, 0x21, 0x18, 0xfc, 0xb2, 0xcc, 0x22, 0x7e, 0x19,
	0x12, 0x4e, 0xd0, 0xe4, 0x9c, 0xaf, 0xbc, 0x69, 0xce, 0x57, 0x67, 0xe7, 0x7c, 0x0b, 0xea, 0xe6,
	0x7a, 0xa7, 0x0d, 0x94, 0x8d, 0x7f, 0x43, 0x30, 0xfe, 0x2d, 0x13, 0xd5, 0x2b, 0xc6, 0xbf, 0x21,
	0xa1, 0xf6, 0xb7, 0x84, 0x65, 0x37, 0xa1, 0x8a, 0xdd, 0xcc, 0x42, 0x44, 0xb2, 0xba, 0x5f, 0xd1,
	0xcb, 0x4e, 0xa8, 0xa3, 0x43, 0x06, 0xba, 0x37, 0x30, 0x56, 0xd3, 0x04, 0x74, 0xfe, 0x3d, 0xb8,
	0xc6, 0x62, 0x45, 0x85, 0xce, 0x25, 0x3a, 0xd7, 0xfa, 0x06, 0xca, 0xde, 0xca, 0x19, 0xda, 0x7e,
	0x27, 0xf4, 0x7e, 0xe5, 0x40, 0xe3, 0x39, 0x51, 0xf4, 0x9c, 0x8c, 0xd0, 0xe3, 0x1b, 0x6e, 0xc9,
	0xd3, 0x89, 0x2b, 0xcd, 0x4d, 0xdc, 0xb8, 0x70, 0x2b, 0x97, 0x17, 0x6e, 0x75, 0xba, 0x70, 0xde,
	0x57, 0xab, 0x70, 0xef, 0x2a, 0xf7, 0x5a, 0xf7, 0x11, 0x94, 0x87, 0x78, 0x5b, 0x77, 0xae, 0xfa,
	0xa2, 0x60, 0xe4, 0xf5, 0x45, 0x7f, 0x68, 0x1c, 0x62, 0xf4, 0x97, 0x5e, 0xf4, 0x7d, 0x94, 0xf3,
	0x33, 0x05, 0xf7, 0x23, 0xa8, 0x65, 0x05, 0xc2, 0xad, 0x35, 0xf6, 0xbc, 0x4b, 0xde, 0x12, 0x6c,
	0x61, 0xfd, 0x5c, 0xc7, 0xfd, 0x29, 0x34, 0x98, 0x4e, 0xbe, 0xed, 0x89, 0xd5, 0x45, 0xc0, 0x9e,
	0x8f, 0x81, 0x0f, 0x46, 0x1e, 0x6b, 0xf3, 0x14, 0xd6, 0x4e, 0x4c, 0xa9, 0xac, 0x7e, 0x79, 0x11,
	0xc6, 0x16, 0x2a, 0xea, 0x37, 0x33, 0x9d, 0xac, 0xbe, 0x85, 0xb3, 0xa1, 0xf2, 0xc6, 0xb3, 0xa1,
	0x7a, 0xd9, 0xd9, 0x50, 0x5b, 0xe6, 0x6c, 0x38, 0x82, 0x71, 0xf3, 0xd9, 0xf8, 0xeb, 0xa8, 0xff,
	0xde, 0x62, 0xfd, 0x4e, 0xb1, 0x5b, 0xfd, 0xf5, 0xb1, 0xbe, 0x5e, 0x7b, 0x7f, 0x71, 0x60, 0x7b,
	0xba, 0x57, 0x0e, 0xa9, 0xc6, 0xd4, 0x94, 0x4a, 0x85, 0x5d, 0x72, 0x05, 0xdc, 0x71, 0x3f, 0x80,
	0x8a, 0xed, 0x87, 0x95, 0x2b, 0xf6, 0x83, 0x95, 0x77, 0x7f, 0x02, 0x55, 0xdb, 0xf9, 0xd8, 0xc9,
	0x57, 0xea, 0xc2, 0x4c, 0xc3, 0xfb, 0xba, 0x04, 0x77, 0xe6, 0x46, 0x2f, 0x13, 0x1e, 0x4b, 0xfa,
	0x7f, 0x1e, 0xbe, 0x7b, 0x08, 0xeb, 0x93, 0x20, 0x83, 0x20, 0xb9, 0x44, 0x35, 0xd7, 0x26, 0xa0,
	0xc8, 0xfd, 0x3e, 0xb8, 0xb6, 0x51, 0x8b, 0xd7, 0x2a, 0x83, 0xac, 0x1b, 0x96, 0x93, 0xdf, 0xaa,
	0xbc, 0x27, 0xd0, 0xde, 0xe7, 0xb1, 0xe4, 0x11, 0xf5, 0xa9, 0xe4, 0xa9, 0x08, 0xe8, 0x92, 0x55,
	0xf7, 0x3e, 0x81, 0xad, 0x19, 0x0b, 0xcb, 0x65, 0xde, 0x7b, 0x0c, 0x37, 0x5f, 0x09, 0xc2, 0x62,
	0x4a, 0x0f, 0x04, 0x8f, 0x97, 0x8e, 0xe0, 0x23, 0x68, 0x4d, 0xaa, 0x2f, 0xe9, 0xfe, 0x63, 0xb8,
	0x75, 0x40, 0xfb, 0x34, 0x96, 0x6c, 0xf8, 0xcd, 0x02, 0x78, 0x02, 0xed, 0x69, 0x03, 0x4b, 0x86,
	0xf0, 0x4b, 0x07, 0x36, 0x5e, 0xf1, 0x33, 0x1a, 0x17, 0x91, 0xf9, 0x63, 0x58, 0x91, 0x22, 0x40,
	0xcd, 0xc6, 0xde, 0x0f, 0x66, 0xdb, 0x21, 0xff, 0xe8, 0x84, 0x9a, 0xfb, 0x82, 0xe2, 0x9a, 0x44,
	0xf2, 0xf3, 0x3d, 0x5f, 0x6b, 0xba, 0x7b, 0xb0, 0xa2, 0x4e, 0xd4, 0x62, 0x74, 0x9e, 0x34, 0xe0,
	0x6b, 0x61, 0x8f, 0xc2, 0xb5, 0x17, 0xac, 0x37, 0x64, 0x42, 0x1d, 0xf0, 0x01, 0x61, 0xf1, 0x55,
	0x6f, 0x1d, 0x9a, 0x96, 0xa6, 0xf9, 0x49, 0x85, 0xcf, 0x6e, 0x0b, 0xaa, 0x21, 0x93, 0x49, 0x44,
	0x46, 0xf6, 0x84, 0xca, 0x96, 0xde, 0x5f, 0x1d, 0x68, 0x4d, 0xf8, 0x99, 0x7a, 0xe5, 0xb2, 0xd7,
	0xc0, 0xf1, 0x95, 0xc5, 0x10, 0xcc, 0x6b, 0xd3, 0x7f, 0xfb, 0xc6, 0xea, 0x1e, 0x40, 0x23, 0x44,
	0xaf, 0xd9, 0xf1, 0xa1, 0x13, 0xf4, 0xee, 0x6c, 0x82, 0x66, 0x32, 0xe1, 0x43, 0x98, 0x3f, 0x7b,
	0xbf, 0x2f, 0xc1, 0xc6, 0xd1, 0xa9, 0x64, 0x01, 0x89, 0x5e, 0x90, 0x11, 0x15, 0x98, 0xaa, 0x1d,
	0x68, 0x84, 0x54, 0x06, 0x82, 0x25, 0xf8, 0xcd, 0xc9, 0x44, 0x5f, 0x24, 0xe9, 0xa4, 0x24, 0x82,
	0x87, 0x69, 0xa0, 0x6c, 0xfe, 0xb2, 0xa5, 0xfb, 0x36, 0x54, 0x86, 0x34, 0x0e, 0x2d, 0x02, 0xd5,
	0x7d, 0xbb, 0xd2, 0x2f, 0x91, 0xbd, 0x54, 0x8e, 0x63, 0xad, 0xfb, 0xd5, 0x5e, 0x6a, 0x8e, 0xa1,
	0xbb, 0xd0, 0x8c, 0xf8, 0x89, 0x0e, 0xc1, 0x5c, 0x04, 0xcc, 0x05, 0xab, 0x61, 0x69, 0x78, 0x8f,
	0x68, 0x41, 0x55, 0xbf, 0x1a, 0xe8, 0x68, 0x0c, 0x0a, 0x64, 0x4b, 0xfc, 0x48, 0x42, 0x05, 0x23,
	0x91, 0x3d, 0x9d, 0xec, 0xca, 0xbd, 0x07, 0x6b, 0x01, 0x8f, 0xfb, 0xec, 0x24, 0x15, 0xe6, 0xcb,
	0x99, 0xb9, 0x33, 0x4d, 0x12, 0xdd, 0xdb, 0x50, 0x17, 0x76, 0xe2, 0x65, 0xf6, 0x06, 0x98, 0x13,
	0xbc, 0x3f, 0x3b, 0xb0, 0xf6, 0x82, 0xc5, 0x67, 0xe3, 0xcc, 0x7c, 0xb7, 0x08, 0x74, 0x18, 0xac,
	0x49, 0xce, 0x18, 0xbf, 0x30, 0xdc, 0x09, 0x31, 0xfc, 0x26, 0x55, 0x9a, 0x12, 0xc3, 0xcf, 0x52,
	0x3b, 0xd0, 0x88, 0xd3, 0x81, 0xba, 0xf8, 0x32, 0xa5, 0x29, 0x95, 0xf6, 0x6b, 0x42, 0x91, 0x64,
	0x25, 0x44, 0x26, 0xb1, 0x9a, 0x4b, 0x64, 0x24, 0x7d, 0xed, 0x66, 0x71, 0x48, 0x2f, 0xec, 0xeb,
	0xb5, 0x59, 0x78, 0x5f, 0x40, 0xf3, 0x90, 0xaa, 0x71, 0xdc, 0x8f, 0xa0, 0x12, 0xe9, 0xc5, 0x8f,
	0xec, 0x24, 0xde, 0x99, 0xd7, 0x27, 0x85, 0x8d, 0xfa, 0x56, 0xdc, 0xdd, 0x84, 0x32, 0x4b, 0xba,
	0xc3, 0x87, 0xd9, 0x98, 0xb0, 0xe4, 0xf3, 0x87, 0xde, 0x6f, 0x1d, 0x58, 0x7f, 0x25, 0x48, 0x2c,
	0xc7, 0x0e, 0xde, 0xb7, 0x0e, 0xf6, 0xac, 0x83, 0x39, 0xf7, 0x80, 0x62, 0x40, 0xd6, 0xfe, 0x9e,
	0xdb, 0x86, 0x1a, 0x7e, 0x57, 0x0e, 0x78, 0x64, 0x5d, 0xe4, 0x6b, 0xf7, 0x06, 0x54, 0xa4, 0x08,
	0xba, 0x2c, 0xb1, 0xad, 0x54, 0x96, 0x22, 0xe8, 0x24, 0x9a, 0x1c, 0x4a, 0xa5, 0xc9, 0xa6, 0x8f,
	0xca, 0xa1, 0x54, 0x9d, 0xc4, 0xfb, 0x93, 0x03, 0x6b, 0x78, 0xa8, 0xc4, 0x54, 0xbd, 0xe4, 0x21,
	0x8d, 0xdc, 0x03, 0xd8, 0x26, 0xa9, 0x3a, 0xd5, 0xf8, 0x10, 0x60, 0xb9, 0xbb, 0xa7, 0x94, 0x84,
	0xfa, 0xc5, 0x2c, 0xf3, 0x68, 0x8a, 0x77, 0x7b, 0x52, 0xea, 0x67, 0x28, 0x74, 0x94, 0x45, 0xf1,
	0x73, 0x78, 0x8f, 0xc6, 0x01, 0x49, 0x64, 0x1a, 0x19, 0x23, 0x92, 0x06, 0xa9, 0x60, 0x6a, 0xd4,
	0x4d, 0xc8, 0x28, 0xe2, 0x24, 0xec, 0x4e, 0x6d, 0xe0, 0xde, 0x84, 0xf8, 0xb1, 0x95, 0x3e, 0x32,
	0xc2, 0x99, 0x59, 0xef, 0x6f, 0x0e, 0x5c, 0xff, 0xec, 0xb8, 0x83, 0x19, 0x99, 0xf8, 0xac, 0xf8,
	0x4d, 0x33, 0xf9, 0x6d, 0x60, 0xca, 0x03, 0xd8, 0x24, 0x49, 0x12, 0x65, 0xe9, 0x0a, 0x78, 0xac,
	0x68, 0xac, 0x30, 0xcf, 0x4d, 0xdf, 0x2d, 0xb0, 0xf6, 0x0d, 0xe7, 0xe9, 0xc6, 0xdf, 0x5f, 0x6f,
	0x3b, 0xff, 0x78, 0xbd, 0xed, 0xfc, 0xf3, 0xf5, 0xb6, 0xf3, 0xbb, 0x7f, 0x6d, 0x7f, 0xa7, 0x57,
	0xc1, 0x6c, 0xfc, 0xf8, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x72, 0x46, 0x05, 0xd4, 0xc6, 0x18,
	0x00, 0x00,
}
