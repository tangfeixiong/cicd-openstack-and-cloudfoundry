// Code generated by protoc-gen-gogo.
// source: service.proto
// DO NOT EDIT!

/*
	Package echopb is a generated protocol buffer package.

	It is generated from these files:
		service.proto
		workerservice.proto

	It has these top-level messages:
		EchoMessage
		SSHReqRespData
*/
package echopb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis/google/api"
import echopb_openstack1 "github.com/tangfeixiong/go-to-openstack-bootcamp/kopos/echopb/openstack"
import echopb_openstack "github.com/tangfeixiong/go-to-openstack-bootcamp/kopos/echopb/openstack"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EchoMessage struct {
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *EchoMessage) Reset()                    { *m = EchoMessage{} }
func (m *EchoMessage) String() string            { return proto.CompactTextString(m) }
func (*EchoMessage) ProtoMessage()               {}
func (*EchoMessage) Descriptor() ([]byte, []int) { return fileDescriptorService, []int{0} }

func (m *EchoMessage) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type SSHReqRespData struct {
	Cmd    string   `protobuf:"bytes,1,opt,name=cmd,proto3" json:"cmd,omitempty"`
	Env    []string `protobuf:"bytes,2,rep,name=env" json:"env,omitempty"`
	Result []string `protobuf:"bytes,3,rep,name=result" json:"result,omitempty"`
}

func (m *SSHReqRespData) Reset()                    { *m = SSHReqRespData{} }
func (m *SSHReqRespData) String() string            { return proto.CompactTextString(m) }
func (*SSHReqRespData) ProtoMessage()               {}
func (*SSHReqRespData) Descriptor() ([]byte, []int) { return fileDescriptorService, []int{1} }

func (m *SSHReqRespData) GetCmd() string {
	if m != nil {
		return m.Cmd
	}
	return ""
}

func (m *SSHReqRespData) GetEnv() []string {
	if m != nil {
		return m.Env
	}
	return nil
}

func (m *SSHReqRespData) GetResult() []string {
	if m != nil {
		return m.Result
	}
	return nil
}

func init() {
	proto.RegisterType((*EchoMessage)(nil), "echopb.EchoMessage")
	proto.RegisterType((*SSHReqRespData)(nil), "echopb.SSHReqRespData")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for EchoService service

type EchoServiceClient interface {
	Echo(ctx context.Context, in *EchoMessage, opts ...grpc.CallOption) (*EchoMessage, error)
	// To discover networks (App user, e.g. identity service register).
	//
	// Input/Output is a same protobuf/json object. But for HTTP request, you may not need anything.
	DiscoverNetworks(ctx context.Context, in *echopb_openstack1.NetworkDiscoveryReqRespData, opts ...grpc.CallOption) (*echopb_openstack1.NetworkDiscoveryReqRespData, error)
	// To discover subnets (App user, e.g. identity service register).
	//
	// Input/Output is a same protobuf/json object. But for HTTP request, you may not need anything.
	DiscoverSubnets(ctx context.Context, in *echopb_openstack1.SubnetDiscoveryReqRespData, opts ...grpc.CallOption) (*echopb_openstack1.SubnetDiscoveryReqRespData, error)
	// To discover networks (App user, e.g. identity service register).
	//
	// Input/Output is a same protobuf/json object. But for HTTP request, you may not need anything.
	DiscoverNetworkingTopology(ctx context.Context, in *echopb_openstack1.NetworkTopologyReqRespData, opts ...grpc.CallOption) (*echopb_openstack1.NetworkTopologyReqRespData, error)
	// To establish networking landscape (App admin).
	//
	// Input/Output is a same protobuf/json object but reqest only need less fields. For example:
	//  {
	//    "vnets": [
	//      {
	//        "name": "int-stage-0",
	//        "subnets": [
	//          {
	//            "name": "int-192-168-128-0-slash-24",
	//            "cidr": "192.168.128.0/24",
	//            "enabledhcp": true
	//          }
	//        ]
	//      },
	//      {
	//        "name": "int-stage-1",
	//        "subnets": [
	//          {
	//            "name": "int-192-168-129-0-slash-24",
	//            "cidr": "192.168.129.0/24",
	//            "enabledhcp": true
	//          }
	//        ]
	//      },
	//      {
	//        "name": "int-stage-2",
	//        "subnets": [
	//          {
	//            "name": "int-192-168-130-0-slash-24",
	//            "cidr": "192.168.130.0/24",
	//            "enabledhcp": true
	//          }
	//        ]
	//      },
	//      {
	//        "name": "int-stage-3",
	//        "subnets": [
	//          {
	//            "name": "int-192-168-131-0-slash-24",
	//            "cidr": "192.168.131.0/24",
	//            "enabledhcp": true
	//          }
	//        ]
	//      },
	//      {
	//        "name": "public",
	//        "admin_state_up": true,
	//        "subnets": [
	//          {
	//            "name": "10.100.151.0/24",
	//            "cidr": "10.100.151.0/24",
	//            "gateway_ip": "10.100.151.1",
	//            "allocation_pools": {
	//              "start": "10.100.151.50",
	//              "end": "10.100.151.240"
	//            },
	//            "enabledhcp": false
	//          }
	//        ],
	//        "shared": true
	//      }
	//    ],
	//    "vrouter": {
	//      "name": "hack",
	//      "admint_state_up": true
	//    },
	//    "secgroup": {
	//      "name": "hack",
	//      "rules": [
	//        {
	//          "direction": "ingress",
	//          "protocol": "tcp"
	//        },
	//        {
	//          "direction": "ingress",
	//          "protocol": "udp"
	//        },
	//        {
	//          "direction": "ingress",
	//          "protocol": "icmp"
	//        }
	//      ]
	//    },
	//    "ifaces_info": [
	//      {
	//        "router_name": "hack",
	//        "network_name": "int-stage-0",
	//        "subnet_name": "int-192-168-128-0-slash-24",
	//        "secgroups_info": [
	//          {
	//            "name": "hack"
	//          }
	//        ]
	//      },
	//      {
	//        "router_name": "hack",
	//        "network_name": "int-stage-1",
	//        "subnet_name": "int-192-168-129-0-slash-24",
	//        "secgroups_info": [
	//          {
	//            "name": "hack"
	//          }
	//        ]
	//      },
	//      {
	//        "router_name": "hack",
	//        "network_name": "int-stage-2",
	//        "subnet_name": "int-192-168-130-0-slash-24",
	//        "secgroups_info": [
	//          {
	//            "name": "hack"
	//          }
	//        ]
	//      },
	//      {
	//        "router_name": "hack",
	//        "network_name": "int-stage-3",
	//        "subnet_name": "int-192-168-131-0-slash-24",
	//        "secgroups_info": [
	//          {
	//            "name": "hack"
	//          }
	//        ]
	//      }
	//    ],
	//    "gateways_info": [
	//      {
	//        "network_name": "public",
	//        "router_name": "hack"
	//      }
	//    ]
	//  }
	// Altervative '***_id' is available
	EstablishNetworkLandscape(ctx context.Context, in *echopb_openstack1.OpenstackNeutronLandscapeReqRespData, opts ...grpc.CallOption) (*echopb_openstack1.OpenstackNeutronLandscapeReqRespData, error)
	// To discover images (App user, e.g. identity service register).
	//
	// Input/Output is a same protobuf/json object. But for HTTP request, you may not need anything.
	DiscoverImages(ctx context.Context, in *echopb_openstack1.ImageDiscoveryReqRespData, opts ...grpc.CallOption) (*echopb_openstack1.ImageDiscoveryReqRespData, error)
	// To discover a image detailed
	//
	// The request input is 'id' in URL path
	DiscoverImageDetailed(ctx context.Context, in *echopb_openstack.Image, opts ...grpc.CallOption) (*echopb_openstack.Image, error)
	// To search image name for details
	//
	// The request input is 'name' in URL path
	SearchImageDetails(ctx context.Context, in *echopb_openstack.Image, opts ...grpc.CallOption) (*echopb_openstack.Image, error)
	// To discover Flavors (App user, e.g. identity service register).
	//
	// Input/Output is a same protobuf/json object. But for HTTP request, you may not need anything.
	DiscoverFlavors(ctx context.Context, in *echopb_openstack1.FlavorDiscoveryReqRespData, opts ...grpc.CallOption) (*echopb_openstack1.FlavorDiscoveryReqRespData, error)
	// To discover a flavor detailed
	//
	// The request input is 'id' in URL path
	DiscoverFlavorDetailed(ctx context.Context, in *echopb_openstack1.Flavor, opts ...grpc.CallOption) (*echopb_openstack1.Flavor, error)
	// To search flavor name for details
	//
	// The request input is 'name' in URL path
	SearchFlavorDetails(ctx context.Context, in *echopb_openstack1.Flavor, opts ...grpc.CallOption) (*echopb_openstack1.Flavor, error)
	// To discover Machines (App user, e.g. identity service register).
	//
	// Input/Output is a same protobuf/json object. But for HTTP request, you may not need anything.
	DiscoverMachines(ctx context.Context, in *echopb_openstack1.MachineDiscoveryReqRespData, opts ...grpc.CallOption) (*echopb_openstack1.MachineDiscoveryReqRespData, error)
	// To reboot Machines (App user, e.g. identity service register).
	//
	// Input/Output is a same protobuf/json object. But for HTTP request, you may not need anything.
	RebootMachines(ctx context.Context, in *echopb_openstack1.MachineRebootReqRespData, opts ...grpc.CallOption) (*echopb_openstack1.MachineRebootReqRespData, error)
	// To discover Machines (App user, e.g. identity service register).
	//
	// Input/Output is a same protobuf/json object. But for HTTP request, you may not need anything.
	DestroyMachines(ctx context.Context, in *echopb_openstack1.MachineDestroyReqRespData, opts ...grpc.CallOption) (*echopb_openstack1.MachineDestroyReqRespData, error)
	// To spawn machines into networking landscape (App user, e.g. identity service register)
	//
	// Input/Output is a same protobuf/json object. For example:
	// [ {
	//    "flavor_name": "m1.small",
	//    "image_name": "cirros",
	//    "min_count": 2,
	//    "max_count": 4,
	//    "secgroups_info": [],
	//    "user_data": [],
	//    "network_name": "private",
	//    "floating_network_name": "public",
	//    "personality": [],
	//    "name_prefix": "awesome VM"
	// } ]
	// Altervative 'flavor_id' and 'image_id' is available
	// 'floating_network_name' is optional
	SpawnMachines(ctx context.Context, in *echopb_openstack1.MachineSpawnsReqRespData, opts ...grpc.CallOption) (*echopb_openstack1.MachineSpawnsReqRespData, error)
	// To boot virtual machines into networking landscape (App user, e.g. identity service register)
	//
	// Input/Output is a same protobuf/json object. For example:
	//  {
	//    "flavor_name": "m1.small",
	//    "image_name": "cirros",
	//    "min_count": 2,
	//    "max_count": 4,
	//    "secgroups_info": [],
	//    "user_data": [],
	//    "network_name": "private",
	//    "floating_network_name": "public",
	//    "personality": [],
	//    "name_prefix": "awesome VM"
	//  }
	// Altervative 'flavor_id' and 'image_id' is available
	BootVirtualMachines(ctx context.Context, in *echopb_openstack1.OpenstackNovaBootReqRespData, opts ...grpc.CallOption) (*echopb_openstack1.OpenstackNovaBootReqRespData, error)
	// To discover Libvirt Domain info (App user, e.g. identity service register).
	//
	// Input/Output is a same protobuf/json object. But for HTTP request, you may not need anything.
	GetLibvirtDomainVNCDisplay(ctx context.Context, in *echopb_openstack1.LibvirtDomainReqRespData, opts ...grpc.CallOption) (*echopb_openstack1.LibvirtDomainReqRespData, error)
	// user (e.g. registered user) to verify if token is available
	ValidateToken(ctx context.Context, in *echopb_openstack1.TokenReqRespData, opts ...grpc.CallOption) (*echopb_openstack1.TokenReqRespData, error)
	// admin (e.g. head referee) to create battlefield
	AdminSharedNetworkCreation(ctx context.Context, in *echopb_openstack1.OpenstackNeutronNetRequestData, opts ...grpc.CallOption) (*echopb_openstack1.OpenstackNeutronNetResponseData, error)
	// user (e.g. registered user) to establish combatroom
	ApplyConsoleIntoDnatWithNetworkAndMachine(ctx context.Context, in *echopb_openstack1.ConsoleResourceRequestData, opts ...grpc.CallOption) (*echopb_openstack1.ConsoleResourceResponseData, error)
	MockSSH(ctx context.Context, in *SSHReqRespData, opts ...grpc.CallOption) (*SSHReqRespData, error)
}

type echoServiceClient struct {
	cc *grpc.ClientConn
}

func NewEchoServiceClient(cc *grpc.ClientConn) EchoServiceClient {
	return &echoServiceClient{cc}
}

func (c *echoServiceClient) Echo(ctx context.Context, in *EchoMessage, opts ...grpc.CallOption) (*EchoMessage, error) {
	out := new(EchoMessage)
	err := grpc.Invoke(ctx, "/echopb.EchoService/Echo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoServiceClient) DiscoverNetworks(ctx context.Context, in *echopb_openstack1.NetworkDiscoveryReqRespData, opts ...grpc.CallOption) (*echopb_openstack1.NetworkDiscoveryReqRespData, error) {
	out := new(echopb_openstack1.NetworkDiscoveryReqRespData)
	err := grpc.Invoke(ctx, "/echopb.EchoService/DiscoverNetworks", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoServiceClient) DiscoverSubnets(ctx context.Context, in *echopb_openstack1.SubnetDiscoveryReqRespData, opts ...grpc.CallOption) (*echopb_openstack1.SubnetDiscoveryReqRespData, error) {
	out := new(echopb_openstack1.SubnetDiscoveryReqRespData)
	err := grpc.Invoke(ctx, "/echopb.EchoService/DiscoverSubnets", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoServiceClient) DiscoverNetworkingTopology(ctx context.Context, in *echopb_openstack1.NetworkTopologyReqRespData, opts ...grpc.CallOption) (*echopb_openstack1.NetworkTopologyReqRespData, error) {
	out := new(echopb_openstack1.NetworkTopologyReqRespData)
	err := grpc.Invoke(ctx, "/echopb.EchoService/DiscoverNetworkingTopology", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoServiceClient) EstablishNetworkLandscape(ctx context.Context, in *echopb_openstack1.OpenstackNeutronLandscapeReqRespData, opts ...grpc.CallOption) (*echopb_openstack1.OpenstackNeutronLandscapeReqRespData, error) {
	out := new(echopb_openstack1.OpenstackNeutronLandscapeReqRespData)
	err := grpc.Invoke(ctx, "/echopb.EchoService/EstablishNetworkLandscape", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoServiceClient) DiscoverImages(ctx context.Context, in *echopb_openstack1.ImageDiscoveryReqRespData, opts ...grpc.CallOption) (*echopb_openstack1.ImageDiscoveryReqRespData, error) {
	out := new(echopb_openstack1.ImageDiscoveryReqRespData)
	err := grpc.Invoke(ctx, "/echopb.EchoService/DiscoverImages", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoServiceClient) DiscoverImageDetailed(ctx context.Context, in *echopb_openstack.Image, opts ...grpc.CallOption) (*echopb_openstack.Image, error) {
	out := new(echopb_openstack.Image)
	err := grpc.Invoke(ctx, "/echopb.EchoService/DiscoverImageDetailed", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoServiceClient) SearchImageDetails(ctx context.Context, in *echopb_openstack.Image, opts ...grpc.CallOption) (*echopb_openstack.Image, error) {
	out := new(echopb_openstack.Image)
	err := grpc.Invoke(ctx, "/echopb.EchoService/SearchImageDetails", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoServiceClient) DiscoverFlavors(ctx context.Context, in *echopb_openstack1.FlavorDiscoveryReqRespData, opts ...grpc.CallOption) (*echopb_openstack1.FlavorDiscoveryReqRespData, error) {
	out := new(echopb_openstack1.FlavorDiscoveryReqRespData)
	err := grpc.Invoke(ctx, "/echopb.EchoService/DiscoverFlavors", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoServiceClient) DiscoverFlavorDetailed(ctx context.Context, in *echopb_openstack1.Flavor, opts ...grpc.CallOption) (*echopb_openstack1.Flavor, error) {
	out := new(echopb_openstack1.Flavor)
	err := grpc.Invoke(ctx, "/echopb.EchoService/DiscoverFlavorDetailed", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoServiceClient) SearchFlavorDetails(ctx context.Context, in *echopb_openstack1.Flavor, opts ...grpc.CallOption) (*echopb_openstack1.Flavor, error) {
	out := new(echopb_openstack1.Flavor)
	err := grpc.Invoke(ctx, "/echopb.EchoService/SearchFlavorDetails", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoServiceClient) DiscoverMachines(ctx context.Context, in *echopb_openstack1.MachineDiscoveryReqRespData, opts ...grpc.CallOption) (*echopb_openstack1.MachineDiscoveryReqRespData, error) {
	out := new(echopb_openstack1.MachineDiscoveryReqRespData)
	err := grpc.Invoke(ctx, "/echopb.EchoService/DiscoverMachines", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoServiceClient) RebootMachines(ctx context.Context, in *echopb_openstack1.MachineRebootReqRespData, opts ...grpc.CallOption) (*echopb_openstack1.MachineRebootReqRespData, error) {
	out := new(echopb_openstack1.MachineRebootReqRespData)
	err := grpc.Invoke(ctx, "/echopb.EchoService/RebootMachines", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoServiceClient) DestroyMachines(ctx context.Context, in *echopb_openstack1.MachineDestroyReqRespData, opts ...grpc.CallOption) (*echopb_openstack1.MachineDestroyReqRespData, error) {
	out := new(echopb_openstack1.MachineDestroyReqRespData)
	err := grpc.Invoke(ctx, "/echopb.EchoService/DestroyMachines", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoServiceClient) SpawnMachines(ctx context.Context, in *echopb_openstack1.MachineSpawnsReqRespData, opts ...grpc.CallOption) (*echopb_openstack1.MachineSpawnsReqRespData, error) {
	out := new(echopb_openstack1.MachineSpawnsReqRespData)
	err := grpc.Invoke(ctx, "/echopb.EchoService/SpawnMachines", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoServiceClient) BootVirtualMachines(ctx context.Context, in *echopb_openstack1.OpenstackNovaBootReqRespData, opts ...grpc.CallOption) (*echopb_openstack1.OpenstackNovaBootReqRespData, error) {
	out := new(echopb_openstack1.OpenstackNovaBootReqRespData)
	err := grpc.Invoke(ctx, "/echopb.EchoService/BootVirtualMachines", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoServiceClient) GetLibvirtDomainVNCDisplay(ctx context.Context, in *echopb_openstack1.LibvirtDomainReqRespData, opts ...grpc.CallOption) (*echopb_openstack1.LibvirtDomainReqRespData, error) {
	out := new(echopb_openstack1.LibvirtDomainReqRespData)
	err := grpc.Invoke(ctx, "/echopb.EchoService/GetLibvirtDomainVNCDisplay", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoServiceClient) ValidateToken(ctx context.Context, in *echopb_openstack1.TokenReqRespData, opts ...grpc.CallOption) (*echopb_openstack1.TokenReqRespData, error) {
	out := new(echopb_openstack1.TokenReqRespData)
	err := grpc.Invoke(ctx, "/echopb.EchoService/ValidateToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoServiceClient) AdminSharedNetworkCreation(ctx context.Context, in *echopb_openstack1.OpenstackNeutronNetRequestData, opts ...grpc.CallOption) (*echopb_openstack1.OpenstackNeutronNetResponseData, error) {
	out := new(echopb_openstack1.OpenstackNeutronNetResponseData)
	err := grpc.Invoke(ctx, "/echopb.EchoService/AdminSharedNetworkCreation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoServiceClient) ApplyConsoleIntoDnatWithNetworkAndMachine(ctx context.Context, in *echopb_openstack1.ConsoleResourceRequestData, opts ...grpc.CallOption) (*echopb_openstack1.ConsoleResourceResponseData, error) {
	out := new(echopb_openstack1.ConsoleResourceResponseData)
	err := grpc.Invoke(ctx, "/echopb.EchoService/ApplyConsoleIntoDnatWithNetworkAndMachine", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoServiceClient) MockSSH(ctx context.Context, in *SSHReqRespData, opts ...grpc.CallOption) (*SSHReqRespData, error) {
	out := new(SSHReqRespData)
	err := grpc.Invoke(ctx, "/echopb.EchoService/MockSSH", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for EchoService service

type EchoServiceServer interface {
	Echo(context.Context, *EchoMessage) (*EchoMessage, error)
	// To discover networks (App user, e.g. identity service register).
	//
	// Input/Output is a same protobuf/json object. But for HTTP request, you may not need anything.
	DiscoverNetworks(context.Context, *echopb_openstack1.NetworkDiscoveryReqRespData) (*echopb_openstack1.NetworkDiscoveryReqRespData, error)
	// To discover subnets (App user, e.g. identity service register).
	//
	// Input/Output is a same protobuf/json object. But for HTTP request, you may not need anything.
	DiscoverSubnets(context.Context, *echopb_openstack1.SubnetDiscoveryReqRespData) (*echopb_openstack1.SubnetDiscoveryReqRespData, error)
	// To discover networks (App user, e.g. identity service register).
	//
	// Input/Output is a same protobuf/json object. But for HTTP request, you may not need anything.
	DiscoverNetworkingTopology(context.Context, *echopb_openstack1.NetworkTopologyReqRespData) (*echopb_openstack1.NetworkTopologyReqRespData, error)
	// To establish networking landscape (App admin).
	//
	// Input/Output is a same protobuf/json object but reqest only need less fields. For example:
	//  {
	//    "vnets": [
	//      {
	//        "name": "int-stage-0",
	//        "subnets": [
	//          {
	//            "name": "int-192-168-128-0-slash-24",
	//            "cidr": "192.168.128.0/24",
	//            "enabledhcp": true
	//          }
	//        ]
	//      },
	//      {
	//        "name": "int-stage-1",
	//        "subnets": [
	//          {
	//            "name": "int-192-168-129-0-slash-24",
	//            "cidr": "192.168.129.0/24",
	//            "enabledhcp": true
	//          }
	//        ]
	//      },
	//      {
	//        "name": "int-stage-2",
	//        "subnets": [
	//          {
	//            "name": "int-192-168-130-0-slash-24",
	//            "cidr": "192.168.130.0/24",
	//            "enabledhcp": true
	//          }
	//        ]
	//      },
	//      {
	//        "name": "int-stage-3",
	//        "subnets": [
	//          {
	//            "name": "int-192-168-131-0-slash-24",
	//            "cidr": "192.168.131.0/24",
	//            "enabledhcp": true
	//          }
	//        ]
	//      },
	//      {
	//        "name": "public",
	//        "admin_state_up": true,
	//        "subnets": [
	//          {
	//            "name": "10.100.151.0/24",
	//            "cidr": "10.100.151.0/24",
	//            "gateway_ip": "10.100.151.1",
	//            "allocation_pools": {
	//              "start": "10.100.151.50",
	//              "end": "10.100.151.240"
	//            },
	//            "enabledhcp": false
	//          }
	//        ],
	//        "shared": true
	//      }
	//    ],
	//    "vrouter": {
	//      "name": "hack",
	//      "admint_state_up": true
	//    },
	//    "secgroup": {
	//      "name": "hack",
	//      "rules": [
	//        {
	//          "direction": "ingress",
	//          "protocol": "tcp"
	//        },
	//        {
	//          "direction": "ingress",
	//          "protocol": "udp"
	//        },
	//        {
	//          "direction": "ingress",
	//          "protocol": "icmp"
	//        }
	//      ]
	//    },
	//    "ifaces_info": [
	//      {
	//        "router_name": "hack",
	//        "network_name": "int-stage-0",
	//        "subnet_name": "int-192-168-128-0-slash-24",
	//        "secgroups_info": [
	//          {
	//            "name": "hack"
	//          }
	//        ]
	//      },
	//      {
	//        "router_name": "hack",
	//        "network_name": "int-stage-1",
	//        "subnet_name": "int-192-168-129-0-slash-24",
	//        "secgroups_info": [
	//          {
	//            "name": "hack"
	//          }
	//        ]
	//      },
	//      {
	//        "router_name": "hack",
	//        "network_name": "int-stage-2",
	//        "subnet_name": "int-192-168-130-0-slash-24",
	//        "secgroups_info": [
	//          {
	//            "name": "hack"
	//          }
	//        ]
	//      },
	//      {
	//        "router_name": "hack",
	//        "network_name": "int-stage-3",
	//        "subnet_name": "int-192-168-131-0-slash-24",
	//        "secgroups_info": [
	//          {
	//            "name": "hack"
	//          }
	//        ]
	//      }
	//    ],
	//    "gateways_info": [
	//      {
	//        "network_name": "public",
	//        "router_name": "hack"
	//      }
	//    ]
	//  }
	// Altervative '***_id' is available
	EstablishNetworkLandscape(context.Context, *echopb_openstack1.OpenstackNeutronLandscapeReqRespData) (*echopb_openstack1.OpenstackNeutronLandscapeReqRespData, error)
	// To discover images (App user, e.g. identity service register).
	//
	// Input/Output is a same protobuf/json object. But for HTTP request, you may not need anything.
	DiscoverImages(context.Context, *echopb_openstack1.ImageDiscoveryReqRespData) (*echopb_openstack1.ImageDiscoveryReqRespData, error)
	// To discover a image detailed
	//
	// The request input is 'id' in URL path
	DiscoverImageDetailed(context.Context, *echopb_openstack.Image) (*echopb_openstack.Image, error)
	// To search image name for details
	//
	// The request input is 'name' in URL path
	SearchImageDetails(context.Context, *echopb_openstack.Image) (*echopb_openstack.Image, error)
	// To discover Flavors (App user, e.g. identity service register).
	//
	// Input/Output is a same protobuf/json object. But for HTTP request, you may not need anything.
	DiscoverFlavors(context.Context, *echopb_openstack1.FlavorDiscoveryReqRespData) (*echopb_openstack1.FlavorDiscoveryReqRespData, error)
	// To discover a flavor detailed
	//
	// The request input is 'id' in URL path
	DiscoverFlavorDetailed(context.Context, *echopb_openstack1.Flavor) (*echopb_openstack1.Flavor, error)
	// To search flavor name for details
	//
	// The request input is 'name' in URL path
	SearchFlavorDetails(context.Context, *echopb_openstack1.Flavor) (*echopb_openstack1.Flavor, error)
	// To discover Machines (App user, e.g. identity service register).
	//
	// Input/Output is a same protobuf/json object. But for HTTP request, you may not need anything.
	DiscoverMachines(context.Context, *echopb_openstack1.MachineDiscoveryReqRespData) (*echopb_openstack1.MachineDiscoveryReqRespData, error)
	// To reboot Machines (App user, e.g. identity service register).
	//
	// Input/Output is a same protobuf/json object. But for HTTP request, you may not need anything.
	RebootMachines(context.Context, *echopb_openstack1.MachineRebootReqRespData) (*echopb_openstack1.MachineRebootReqRespData, error)
	// To discover Machines (App user, e.g. identity service register).
	//
	// Input/Output is a same protobuf/json object. But for HTTP request, you may not need anything.
	DestroyMachines(context.Context, *echopb_openstack1.MachineDestroyReqRespData) (*echopb_openstack1.MachineDestroyReqRespData, error)
	// To spawn machines into networking landscape (App user, e.g. identity service register)
	//
	// Input/Output is a same protobuf/json object. For example:
	// [ {
	//    "flavor_name": "m1.small",
	//    "image_name": "cirros",
	//    "min_count": 2,
	//    "max_count": 4,
	//    "secgroups_info": [],
	//    "user_data": [],
	//    "network_name": "private",
	//    "floating_network_name": "public",
	//    "personality": [],
	//    "name_prefix": "awesome VM"
	// } ]
	// Altervative 'flavor_id' and 'image_id' is available
	// 'floating_network_name' is optional
	SpawnMachines(context.Context, *echopb_openstack1.MachineSpawnsReqRespData) (*echopb_openstack1.MachineSpawnsReqRespData, error)
	// To boot virtual machines into networking landscape (App user, e.g. identity service register)
	//
	// Input/Output is a same protobuf/json object. For example:
	//  {
	//    "flavor_name": "m1.small",
	//    "image_name": "cirros",
	//    "min_count": 2,
	//    "max_count": 4,
	//    "secgroups_info": [],
	//    "user_data": [],
	//    "network_name": "private",
	//    "floating_network_name": "public",
	//    "personality": [],
	//    "name_prefix": "awesome VM"
	//  }
	// Altervative 'flavor_id' and 'image_id' is available
	BootVirtualMachines(context.Context, *echopb_openstack1.OpenstackNovaBootReqRespData) (*echopb_openstack1.OpenstackNovaBootReqRespData, error)
	// To discover Libvirt Domain info (App user, e.g. identity service register).
	//
	// Input/Output is a same protobuf/json object. But for HTTP request, you may not need anything.
	GetLibvirtDomainVNCDisplay(context.Context, *echopb_openstack1.LibvirtDomainReqRespData) (*echopb_openstack1.LibvirtDomainReqRespData, error)
	// user (e.g. registered user) to verify if token is available
	ValidateToken(context.Context, *echopb_openstack1.TokenReqRespData) (*echopb_openstack1.TokenReqRespData, error)
	// admin (e.g. head referee) to create battlefield
	AdminSharedNetworkCreation(context.Context, *echopb_openstack1.OpenstackNeutronNetRequestData) (*echopb_openstack1.OpenstackNeutronNetResponseData, error)
	// user (e.g. registered user) to establish combatroom
	ApplyConsoleIntoDnatWithNetworkAndMachine(context.Context, *echopb_openstack1.ConsoleResourceRequestData) (*echopb_openstack1.ConsoleResourceResponseData, error)
	MockSSH(context.Context, *SSHReqRespData) (*SSHReqRespData, error)
}

func RegisterEchoServiceServer(s *grpc.Server, srv EchoServiceServer) {
	s.RegisterService(&_EchoService_serviceDesc, srv)
}

func _EchoService_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/echopb.EchoService/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).Echo(ctx, req.(*EchoMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _EchoService_DiscoverNetworks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(echopb_openstack1.NetworkDiscoveryReqRespData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).DiscoverNetworks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/echopb.EchoService/DiscoverNetworks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).DiscoverNetworks(ctx, req.(*echopb_openstack1.NetworkDiscoveryReqRespData))
	}
	return interceptor(ctx, in, info, handler)
}

func _EchoService_DiscoverSubnets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(echopb_openstack1.SubnetDiscoveryReqRespData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).DiscoverSubnets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/echopb.EchoService/DiscoverSubnets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).DiscoverSubnets(ctx, req.(*echopb_openstack1.SubnetDiscoveryReqRespData))
	}
	return interceptor(ctx, in, info, handler)
}

func _EchoService_DiscoverNetworkingTopology_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(echopb_openstack1.NetworkTopologyReqRespData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).DiscoverNetworkingTopology(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/echopb.EchoService/DiscoverNetworkingTopology",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).DiscoverNetworkingTopology(ctx, req.(*echopb_openstack1.NetworkTopologyReqRespData))
	}
	return interceptor(ctx, in, info, handler)
}

func _EchoService_EstablishNetworkLandscape_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(echopb_openstack1.OpenstackNeutronLandscapeReqRespData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).EstablishNetworkLandscape(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/echopb.EchoService/EstablishNetworkLandscape",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).EstablishNetworkLandscape(ctx, req.(*echopb_openstack1.OpenstackNeutronLandscapeReqRespData))
	}
	return interceptor(ctx, in, info, handler)
}

func _EchoService_DiscoverImages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(echopb_openstack1.ImageDiscoveryReqRespData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).DiscoverImages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/echopb.EchoService/DiscoverImages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).DiscoverImages(ctx, req.(*echopb_openstack1.ImageDiscoveryReqRespData))
	}
	return interceptor(ctx, in, info, handler)
}

func _EchoService_DiscoverImageDetailed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(echopb_openstack.Image)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).DiscoverImageDetailed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/echopb.EchoService/DiscoverImageDetailed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).DiscoverImageDetailed(ctx, req.(*echopb_openstack.Image))
	}
	return interceptor(ctx, in, info, handler)
}

func _EchoService_SearchImageDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(echopb_openstack.Image)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).SearchImageDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/echopb.EchoService/SearchImageDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).SearchImageDetails(ctx, req.(*echopb_openstack.Image))
	}
	return interceptor(ctx, in, info, handler)
}

func _EchoService_DiscoverFlavors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(echopb_openstack1.FlavorDiscoveryReqRespData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).DiscoverFlavors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/echopb.EchoService/DiscoverFlavors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).DiscoverFlavors(ctx, req.(*echopb_openstack1.FlavorDiscoveryReqRespData))
	}
	return interceptor(ctx, in, info, handler)
}

func _EchoService_DiscoverFlavorDetailed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(echopb_openstack1.Flavor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).DiscoverFlavorDetailed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/echopb.EchoService/DiscoverFlavorDetailed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).DiscoverFlavorDetailed(ctx, req.(*echopb_openstack1.Flavor))
	}
	return interceptor(ctx, in, info, handler)
}

func _EchoService_SearchFlavorDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(echopb_openstack1.Flavor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).SearchFlavorDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/echopb.EchoService/SearchFlavorDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).SearchFlavorDetails(ctx, req.(*echopb_openstack1.Flavor))
	}
	return interceptor(ctx, in, info, handler)
}

func _EchoService_DiscoverMachines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(echopb_openstack1.MachineDiscoveryReqRespData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).DiscoverMachines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/echopb.EchoService/DiscoverMachines",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).DiscoverMachines(ctx, req.(*echopb_openstack1.MachineDiscoveryReqRespData))
	}
	return interceptor(ctx, in, info, handler)
}

func _EchoService_RebootMachines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(echopb_openstack1.MachineRebootReqRespData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).RebootMachines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/echopb.EchoService/RebootMachines",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).RebootMachines(ctx, req.(*echopb_openstack1.MachineRebootReqRespData))
	}
	return interceptor(ctx, in, info, handler)
}

func _EchoService_DestroyMachines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(echopb_openstack1.MachineDestroyReqRespData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).DestroyMachines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/echopb.EchoService/DestroyMachines",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).DestroyMachines(ctx, req.(*echopb_openstack1.MachineDestroyReqRespData))
	}
	return interceptor(ctx, in, info, handler)
}

func _EchoService_SpawnMachines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(echopb_openstack1.MachineSpawnsReqRespData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).SpawnMachines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/echopb.EchoService/SpawnMachines",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).SpawnMachines(ctx, req.(*echopb_openstack1.MachineSpawnsReqRespData))
	}
	return interceptor(ctx, in, info, handler)
}

func _EchoService_BootVirtualMachines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(echopb_openstack1.OpenstackNovaBootReqRespData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).BootVirtualMachines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/echopb.EchoService/BootVirtualMachines",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).BootVirtualMachines(ctx, req.(*echopb_openstack1.OpenstackNovaBootReqRespData))
	}
	return interceptor(ctx, in, info, handler)
}

func _EchoService_GetLibvirtDomainVNCDisplay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(echopb_openstack1.LibvirtDomainReqRespData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).GetLibvirtDomainVNCDisplay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/echopb.EchoService/GetLibvirtDomainVNCDisplay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).GetLibvirtDomainVNCDisplay(ctx, req.(*echopb_openstack1.LibvirtDomainReqRespData))
	}
	return interceptor(ctx, in, info, handler)
}

func _EchoService_ValidateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(echopb_openstack1.TokenReqRespData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).ValidateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/echopb.EchoService/ValidateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).ValidateToken(ctx, req.(*echopb_openstack1.TokenReqRespData))
	}
	return interceptor(ctx, in, info, handler)
}

func _EchoService_AdminSharedNetworkCreation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(echopb_openstack1.OpenstackNeutronNetRequestData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).AdminSharedNetworkCreation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/echopb.EchoService/AdminSharedNetworkCreation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).AdminSharedNetworkCreation(ctx, req.(*echopb_openstack1.OpenstackNeutronNetRequestData))
	}
	return interceptor(ctx, in, info, handler)
}

func _EchoService_ApplyConsoleIntoDnatWithNetworkAndMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(echopb_openstack1.ConsoleResourceRequestData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).ApplyConsoleIntoDnatWithNetworkAndMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/echopb.EchoService/ApplyConsoleIntoDnatWithNetworkAndMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).ApplyConsoleIntoDnatWithNetworkAndMachine(ctx, req.(*echopb_openstack1.ConsoleResourceRequestData))
	}
	return interceptor(ctx, in, info, handler)
}

func _EchoService_MockSSH_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSHReqRespData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).MockSSH(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/echopb.EchoService/MockSSH",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).MockSSH(ctx, req.(*SSHReqRespData))
	}
	return interceptor(ctx, in, info, handler)
}

var _EchoService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "echopb.EchoService",
	HandlerType: (*EchoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _EchoService_Echo_Handler,
		},
		{
			MethodName: "DiscoverNetworks",
			Handler:    _EchoService_DiscoverNetworks_Handler,
		},
		{
			MethodName: "DiscoverSubnets",
			Handler:    _EchoService_DiscoverSubnets_Handler,
		},
		{
			MethodName: "DiscoverNetworkingTopology",
			Handler:    _EchoService_DiscoverNetworkingTopology_Handler,
		},
		{
			MethodName: "EstablishNetworkLandscape",
			Handler:    _EchoService_EstablishNetworkLandscape_Handler,
		},
		{
			MethodName: "DiscoverImages",
			Handler:    _EchoService_DiscoverImages_Handler,
		},
		{
			MethodName: "DiscoverImageDetailed",
			Handler:    _EchoService_DiscoverImageDetailed_Handler,
		},
		{
			MethodName: "SearchImageDetails",
			Handler:    _EchoService_SearchImageDetails_Handler,
		},
		{
			MethodName: "DiscoverFlavors",
			Handler:    _EchoService_DiscoverFlavors_Handler,
		},
		{
			MethodName: "DiscoverFlavorDetailed",
			Handler:    _EchoService_DiscoverFlavorDetailed_Handler,
		},
		{
			MethodName: "SearchFlavorDetails",
			Handler:    _EchoService_SearchFlavorDetails_Handler,
		},
		{
			MethodName: "DiscoverMachines",
			Handler:    _EchoService_DiscoverMachines_Handler,
		},
		{
			MethodName: "RebootMachines",
			Handler:    _EchoService_RebootMachines_Handler,
		},
		{
			MethodName: "DestroyMachines",
			Handler:    _EchoService_DestroyMachines_Handler,
		},
		{
			MethodName: "SpawnMachines",
			Handler:    _EchoService_SpawnMachines_Handler,
		},
		{
			MethodName: "BootVirtualMachines",
			Handler:    _EchoService_BootVirtualMachines_Handler,
		},
		{
			MethodName: "GetLibvirtDomainVNCDisplay",
			Handler:    _EchoService_GetLibvirtDomainVNCDisplay_Handler,
		},
		{
			MethodName: "ValidateToken",
			Handler:    _EchoService_ValidateToken_Handler,
		},
		{
			MethodName: "AdminSharedNetworkCreation",
			Handler:    _EchoService_AdminSharedNetworkCreation_Handler,
		},
		{
			MethodName: "ApplyConsoleIntoDnatWithNetworkAndMachine",
			Handler:    _EchoService_ApplyConsoleIntoDnatWithNetworkAndMachine_Handler,
		},
		{
			MethodName: "MockSSH",
			Handler:    _EchoService_MockSSH_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

func (m *EchoMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EchoMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	return i, nil
}

func (m *SSHReqRespData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SSHReqRespData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Cmd) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Cmd)))
		i += copy(dAtA[i:], m.Cmd)
	}
	if len(m.Env) > 0 {
		for _, s := range m.Env {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Result) > 0 {
		for _, s := range m.Result {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func encodeFixed64Service(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Service(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintService(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *EchoMessage) Size() (n int) {
	var l int
	_ = l
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *SSHReqRespData) Size() (n int) {
	var l int
	_ = l
	l = len(m.Cmd)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if len(m.Env) > 0 {
		for _, s := range m.Env {
			l = len(s)
			n += 1 + l + sovService(uint64(l))
		}
	}
	if len(m.Result) > 0 {
		for _, s := range m.Result {
			l = len(s)
			n += 1 + l + sovService(uint64(l))
		}
	}
	return n
}

func sovService(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozService(x uint64) (n int) {
	return sovService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EchoMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EchoMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EchoMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SSHReqRespData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SSHReqRespData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SSHReqRespData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cmd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cmd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Env", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Env = append(m.Env, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthService
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowService
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipService(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthService = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowService   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("service.proto", fileDescriptorService) }

var fileDescriptorService = []byte{
	// 1006 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x96, 0x4f, 0x6f, 0x1b, 0x45,
	0x18, 0xc6, 0xd9, 0x06, 0x52, 0x3a, 0xa9, 0x13, 0x33, 0xb1, 0x1d, 0xb3, 0x4d, 0xa3, 0x6a, 0x22,
	0x24, 0x48, 0x88, 0xb7, 0x69, 0x25, 0x0e, 0xbd, 0x25, 0x71, 0xa0, 0x95, 0x92, 0x20, 0xd9, 0x55,
	0x90, 0x7a, 0x41, 0xe3, 0xdd, 0x37, 0xf6, 0xe0, 0xf5, 0xcc, 0xb2, 0x33, 0xde, 0x62, 0x45, 0x01,
	0xa9, 0x08, 0x0e, 0xdc, 0x10, 0x17, 0x4e, 0x48, 0x48, 0xf0, 0x21, 0xf8, 0x06, 0x1c, 0x91, 0xf8,
	0x02, 0x28, 0xf0, 0x41, 0xd0, 0xcc, 0xee, 0xba, 0xeb, 0x3f, 0x9b, 0xd8, 0xb9, 0x58, 0xde, 0x79,
	0x9f, 0x79, 0x9f, 0xdf, 0xbc, 0xb3, 0xef, 0xcc, 0xa2, 0x82, 0x84, 0x30, 0x62, 0x2e, 0xd4, 0x82,
	0x50, 0x28, 0x81, 0x17, 0xc1, 0xed, 0x88, 0xa0, 0x65, 0xaf, 0xb7, 0x85, 0x68, 0xfb, 0xe0, 0xd0,
	0x80, 0x39, 0x94, 0x73, 0xa1, 0xa8, 0x62, 0x82, 0xcb, 0x58, 0x65, 0x97, 0x44, 0x00, 0x5c, 0x2a,
	0xea, 0x76, 0x1d, 0x8f, 0x2a, 0x9a, 0x8c, 0x96, 0x5f, 0x8f, 0xb2, 0x1e, 0x6d, 0x27, 0x29, 0xc9,
	0x26, 0x5a, 0x3a, 0x74, 0x3b, 0xe2, 0x18, 0xa4, 0xa4, 0x6d, 0xc0, 0x25, 0xf4, 0x56, 0x44, 0xfd,
	0x3e, 0x54, 0xad, 0x07, 0xd6, 0xfb, 0x77, 0x1a, 0xf1, 0x03, 0x39, 0x42, 0xcb, 0xcd, 0xe6, 0xd3,
	0x06, 0x7c, 0xd9, 0x00, 0x19, 0xd4, 0xa9, 0xa2, 0xb8, 0x88, 0x16, 0xdc, 0x9e, 0x97, 0xa8, 0xf4,
	0x5f, 0x3d, 0x02, 0x3c, 0xaa, 0xde, 0x7a, 0xb0, 0xa0, 0x47, 0x80, 0x47, 0xb8, 0x82, 0x16, 0x43,
	0x90, 0x7d, 0x5f, 0x55, 0x17, 0xcc, 0x60, 0xf2, 0xf4, 0xe8, 0x8f, 0x72, 0xec, 0xd9, 0x8c, 0xd7,
	0x86, 0x0f, 0xd1, 0x9b, 0xfa, 0x11, 0xaf, 0xd6, 0xe2, 0xe5, 0xd5, 0x32, 0x40, 0xf6, 0xb4, 0x41,
	0xb2, 0xfa, 0xea, 0xef, 0xff, 0x7e, 0xba, 0x55, 0x20, 0x6f, 0x3b, 0xd1, 0xae, 0xa3, 0xe3, 0x4f,
	0xac, 0x2d, 0xfc, 0xbd, 0x85, 0x8a, 0x75, 0x26, 0x5d, 0x11, 0x41, 0x78, 0x02, 0xea, 0xa5, 0x08,
	0xbb, 0x12, 0xef, 0xa4, 0xd3, 0x87, 0xab, 0xaf, 0x25, 0xb1, 0x54, 0x3a, 0xc8, 0x2c, 0xcb, 0x9e,
	0x4f, 0x4e, 0x4a, 0x86, 0x63, 0x19, 0xdf, 0xd5, 0x1c, 0x3c, 0xf5, 0x7c, 0x65, 0xa1, 0x95, 0x54,
	0xde, 0xec, 0xb7, 0x38, 0x28, 0x89, 0x3f, 0x9c, 0x4c, 0x1c, 0x87, 0xa6, 0x62, 0xcc, 0xa5, 0x4e,
	0xab, 0x81, 0x97, 0x34, 0x85, 0x4c, 0x0c, 0x7f, 0xb4, 0x90, 0x3d, 0x56, 0x0d, 0xc6, 0xdb, 0xcf,
	0x45, 0x20, 0x7c, 0xd1, 0x1e, 0x4c, 0xe3, 0x49, 0x54, 0xa9, 0xe4, 0x1a, 0x9e, 0x7c, 0x35, 0x59,
	0x33, 0x3c, 0xef, 0x10, 0x53, 0x15, 0x95, 0x08, 0xf4, 0x0e, 0xfd, 0x6e, 0xa1, 0x77, 0x0f, 0xa5,
	0xa2, 0x2d, 0x9f, 0xc9, 0x4e, 0x92, 0xe0, 0x88, 0x72, 0x4f, 0xba, 0x34, 0x00, 0xfc, 0xd1, 0xa4,
	0xc9, 0xa7, 0xe9, 0xbf, 0x13, 0xe8, 0xab, 0x50, 0xf0, 0xa1, 0x38, 0x0b, 0x77, 0xc3, 0x79, 0xa4,
	0x6a, 0x30, 0x31, 0x29, 0x68, 0x4c, 0x3f, 0x55, 0x68, 0xce, 0xaf, 0xd1, 0x72, 0x5a, 0xba, 0x67,
	0xba, 0x55, 0x24, 0xde, 0x9e, 0xf4, 0x30, 0x91, 0xa9, 0xbb, 0x37, 0x8f, 0x98, 0x60, 0x43, 0x71,
	0x17, 0x23, 0x4d, 0xc1, 0x62, 0xb7, 0x36, 0x2a, 0x8f, 0xf8, 0xd7, 0x41, 0x51, 0xe6, 0x83, 0x87,
	0xd7, 0x72, 0x32, 0xdb, 0x79, 0x01, 0xb2, 0x6e, 0xd2, 0x57, 0x70, 0xe9, 0x75, 0x7a, 0xe7, 0xe1,
	0x57, 0x8f, 0xcf, 0x9c, 0x73, 0xe6, 0x5d, 0xe0, 0x2f, 0x10, 0x6e, 0x02, 0x0d, 0xdd, 0x4e, 0xc6,
	0x46, 0xde, 0xc0, 0x85, 0x18, 0x97, 0x75, 0x6c, 0x8f, 0xb9, 0x70, 0xda, 0x03, 0xe7, 0x5c, 0xff,
	0x5e, 0x8c, 0x74, 0xc5, 0xc7, 0x3e, 0x8d, 0x44, 0x38, 0xb5, 0x2b, 0xe2, 0xd0, 0xac, 0x5d, 0x91,
	0xaf, 0x1e, 0xed, 0x8a, 0xb3, 0xc4, 0xb0, 0x8b, 0x2a, 0xa3, 0x0c, 0xc3, 0xd2, 0x56, 0xf3, 0x92,
	0xdb, 0xb9, 0x11, 0x72, 0xdf, 0x58, 0xac, 0xe1, 0x72, 0xc6, 0x22, 0x53, 0x5d, 0x8e, 0x56, 0xe3,
	0xea, 0x66, 0xad, 0xe4, 0x8d, 0x9c, 0x36, 0x8d, 0xd3, 0x7d, 0x7c, 0x6f, 0xdc, 0x29, 0x5b, 0xe1,
	0xef, 0x32, 0x07, 0xe0, 0x31, 0x75, 0x3b, 0x8c, 0xc3, 0xd4, 0x03, 0x30, 0x89, 0xcd, 0x7a, 0x00,
	0x5e, 0x21, 0x1f, 0x3b, 0x7a, 0x20, 0x8c, 0x20, 0x94, 0xf8, 0x1b, 0xb4, 0xdc, 0x80, 0x96, 0x10,
	0x6a, 0x08, 0xb1, 0x95, 0x9b, 0x35, 0x16, 0x66, 0x09, 0xe6, 0xd0, 0x92, 0xb2, 0xb1, 0x5f, 0x21,
	0xa6, 0x79, 0x42, 0x13, 0xd6, 0xfd, 0xfb, 0xad, 0x7e, 0xd5, 0x40, 0xaa, 0x50, 0x0c, 0x86, 0x08,
	0xdb, 0xf9, 0x0b, 0x8b, 0x95, 0xd7, 0x74, 0x70, 0xae, 0x98, 0x54, 0x0c, 0x44, 0x91, 0x2c, 0xc5,
	0x10, 0xee, 0xc0, 0xf5, 0xcd, 0x29, 0x72, 0x81, 0x0a, 0xcd, 0x80, 0xbe, 0xe4, 0x33, 0x54, 0xc1,
	0xe8, 0xe4, 0x6c, 0x55, 0x98, 0xd0, 0xa6, 0xb7, 0x10, 0xb9, 0x63, 0x36, 0x41, 0x87, 0xb5, 0xfd,
	0x0f, 0x16, 0x5a, 0xdd, 0x17, 0x42, 0x9d, 0xb2, 0x50, 0xf5, 0xa9, 0x3f, 0xa4, 0xa8, 0x5d, 0x75,
	0x5c, 0x8a, 0x88, 0xee, 0x8f, 0xed, 0xc7, 0x9c, 0xfa, 0xd1, 0xbb, 0x39, 0xdd, 0x91, 0x5f, 0x2d,
	0x64, 0x7f, 0x02, 0xea, 0x88, 0xb5, 0x22, 0x16, 0xaa, 0xba, 0xe8, 0x51, 0xc6, 0x4f, 0x4f, 0x0e,
	0xea, 0x4c, 0x06, 0x3e, 0x1d, 0x4c, 0xab, 0xcc, 0x88, 0xf4, 0x9a, 0xca, 0xe4, 0x69, 0xc9, 0xb6,
	0x61, 0x79, 0x0f, 0x6f, 0x9a, 0x23, 0x3e, 0x56, 0xed, 0x78, 0x46, 0x26, 0xe3, 0x3e, 0x8d, 0xdf,
	0xd9, 0xcf, 0x75, 0xbb, 0xf6, 0x50, 0xe1, 0x94, 0xfa, 0xcc, 0xa3, 0x0a, 0x9e, 0x8b, 0x2e, 0x70,
	0x4c, 0x26, 0x9d, 0x4c, 0x20, 0x4b, 0x33, 0x83, 0x66, 0x74, 0x7f, 0x94, 0x8e, 0xea, 0x92, 0xfc,
	0x62, 0x21, 0x7b, 0xcf, 0xeb, 0x31, 0xde, 0xec, 0xd0, 0x10, 0xbc, 0xe4, 0x3a, 0x3c, 0x08, 0xc1,
	0x7c, 0xcb, 0xe1, 0x87, 0xd7, 0xdf, 0x6a, 0x27, 0xa0, 0x0b, 0xdf, 0x07, 0xa9, 0x0c, 0xca, 0xee,
	0x8c, 0x33, 0x64, 0x20, 0xb8, 0x04, 0x43, 0x76, 0xcf, 0x90, 0x95, 0x49, 0xd1, 0x89, 0x1e, 0x39,
	0x2d, 0xaa, 0x94, 0x0f, 0x67, 0x0c, 0x7c, 0x4f, 0x6a, 0xc0, 0xdf, 0x2c, 0xf4, 0xc1, 0x5e, 0x10,
	0xf8, 0x83, 0x03, 0xc1, 0xa5, 0xf0, 0xe1, 0x19, 0x57, 0xa2, 0xce, 0xa9, 0xfa, 0x8c, 0xa9, 0xf4,
	0xf2, 0xde, 0xe3, 0x5e, 0xf2, 0x5e, 0x4d, 0x3b, 0xca, 0x93, 0x79, 0x0d, 0x90, 0xa2, 0x1f, 0xba,
	0x90, 0x65, 0xdd, 0x99, 0x41, 0x9d, 0xe1, 0xb4, 0x0d, 0x67, 0x89, 0xac, 0x68, 0x4e, 0x57, 0xf4,
	0x5a, 0x54, 0x85, 0x42, 0xf4, 0x0c, 0xa6, 0x8f, 0x6e, 0x1f, 0x0b, 0xb7, 0xdb, 0x6c, 0x3e, 0xc5,
	0x95, 0x34, 0xeb, 0xe8, 0xc7, 0xaa, 0x9d, 0x33, 0x4e, 0x76, 0x4d, 0xda, 0x6d, 0x72, 0xdb, 0x34,
	0x8e, 0xec, 0x3c, 0xb1, 0xb6, 0x5e, 0xac, 0xe0, 0x42, 0xf2, 0xe4, 0x9c, 0xbb, 0x3d, 0xef, 0xe2,
	0x45, 0x72, 0x35, 0x4b, 0xd9, 0x09, 0xfa, 0xad, 0xfd, 0xe2, 0x9f, 0x97, 0x1b, 0xd6, 0x5f, 0x97,
	0x1b, 0xd6, 0x3f, 0x97, 0x1b, 0xd6, 0xcf, 0xff, 0x6e, 0xbc, 0xd1, 0x5a, 0x34, 0xdf, 0xd1, 0x8f,
	0xff, 0x0f, 0x00, 0x00, 0xff, 0xff, 0xce, 0xa4, 0xf1, 0xa5, 0xab, 0x0b, 0x00, 0x00,
}
