// Code generated by protoc-gen-go.
// source: google/spanner/v1/type.proto
// DO NOT EDIT!

package spanner

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// `TypeCode` is used as part of [Type][google.spanner.v1.Type] to
// indicate the type of a Cloud Spanner value.
//
// Each legal value of a type can be encoded to or decoded from a JSON
// value, using the encodings described below. All Cloud Spanner values can
// be `null`, regardless of type; `null`s are always encoded as a JSON
// `null`.
type TypeCode int32

const (
	// Not specified.
	TypeCode_TYPE_CODE_UNSPECIFIED TypeCode = 0
	// Encoded as JSON `true` or `false`.
	TypeCode_BOOL TypeCode = 1
	// Encoded as `string`, in decimal format.
	TypeCode_INT64 TypeCode = 2
	// Encoded as `number`, or the strings `"NaN"`, `"Infinity"`, or
	// `"-Infinity"`.
	TypeCode_FLOAT64 TypeCode = 3
	// Encoded as `string` in RFC 3339 timestamp format. The time zone
	// must be present, and must be `"Z"`.
	TypeCode_TIMESTAMP TypeCode = 4
	// Encoded as `string` in RFC 3339 date format.
	TypeCode_DATE TypeCode = 5
	// Encoded as `string`.
	TypeCode_STRING TypeCode = 6
	// Encoded as a base64-encoded `string`, as described in RFC 4648,
	// section 4.
	TypeCode_BYTES TypeCode = 7
	// Encoded as `list`, where the list elements are represented
	// according to [array_element_type][google.spanner.v1.Type.array_element_type].
	TypeCode_ARRAY TypeCode = 8
	// Encoded as `list`, where list element `i` is represented according
	// to [struct_type.fields[i]][google.spanner.v1.StructType.fields].
	TypeCode_STRUCT TypeCode = 9
)

var TypeCode_name = map[int32]string{
	0: "TYPE_CODE_UNSPECIFIED",
	1: "BOOL",
	2: "INT64",
	3: "FLOAT64",
	4: "TIMESTAMP",
	5: "DATE",
	6: "STRING",
	7: "BYTES",
	8: "ARRAY",
	9: "STRUCT",
}
var TypeCode_value = map[string]int32{
	"TYPE_CODE_UNSPECIFIED": 0,
	"BOOL":                  1,
	"INT64":                 2,
	"FLOAT64":               3,
	"TIMESTAMP":             4,
	"DATE":                  5,
	"STRING":                6,
	"BYTES":                 7,
	"ARRAY":                 8,
	"STRUCT":                9,
}

func (x TypeCode) String() string {
	return proto.EnumName(TypeCode_name, int32(x))
}
func (TypeCode) EnumDescriptor() ([]byte, []int) { return fileDescriptor6, []int{0} }

// `Type` indicates the type of a Cloud Spanner value, as might be stored in a
// table cell or returned from an SQL query.
type Type struct {
	// Required. The [TypeCode][google.spanner.v1.TypeCode] for this type.
	Code TypeCode `protobuf:"varint,1,opt,name=code,enum=google.spanner.v1.TypeCode" json:"code,omitempty"`
	// If [code][google.spanner.v1.Type.code] == [ARRAY][google.spanner.v1.TypeCode.ARRAY], then `array_element_type`
	// is the type of the array elements.
	ArrayElementType *Type `protobuf:"bytes,2,opt,name=array_element_type,json=arrayElementType" json:"array_element_type,omitempty"`
	// If [code][google.spanner.v1.Type.code] == [STRUCT][google.spanner.v1.TypeCode.STRUCT], then `struct_type`
	// provides type information for the struct's fields.
	StructType *StructType `protobuf:"bytes,3,opt,name=struct_type,json=structType" json:"struct_type,omitempty"`
}

func (m *Type) Reset()                    { *m = Type{} }
func (m *Type) String() string            { return proto.CompactTextString(m) }
func (*Type) ProtoMessage()               {}
func (*Type) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{0} }

func (m *Type) GetCode() TypeCode {
	if m != nil {
		return m.Code
	}
	return TypeCode_TYPE_CODE_UNSPECIFIED
}

func (m *Type) GetArrayElementType() *Type {
	if m != nil {
		return m.ArrayElementType
	}
	return nil
}

func (m *Type) GetStructType() *StructType {
	if m != nil {
		return m.StructType
	}
	return nil
}

// `StructType` defines the fields of a [STRUCT][google.spanner.v1.TypeCode.STRUCT] type.
type StructType struct {
	// The list of fields that make up this struct. Order is
	// significant, because values of this struct type are represented as
	// lists, where the order of field values matches the order of
	// fields in the [StructType][google.spanner.v1.StructType]. In turn, the order of fields
	// matches the order of columns in a read request, or the order of
	// fields in the `SELECT` clause of a query.
	Fields []*StructType_Field `protobuf:"bytes,1,rep,name=fields" json:"fields,omitempty"`
}

func (m *StructType) Reset()                    { *m = StructType{} }
func (m *StructType) String() string            { return proto.CompactTextString(m) }
func (*StructType) ProtoMessage()               {}
func (*StructType) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{1} }

func (m *StructType) GetFields() []*StructType_Field {
	if m != nil {
		return m.Fields
	}
	return nil
}

// Message representing a single field of a struct.
type StructType_Field struct {
	// The name of the field. For reads, this is the column name. For
	// SQL queries, it is the column alias (e.g., `"Word"` in the
	// query `"SELECT 'hello' AS Word"`), or the column name (e.g.,
	// `"ColName"` in the query `"SELECT ColName FROM Table"`). Some
	// columns might have an empty name (e.g., !"SELECT
	// UPPER(ColName)"`). Note that a query result can contain
	// multiple fields with the same name.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// The type of the field.
	Type *Type `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
}

func (m *StructType_Field) Reset()                    { *m = StructType_Field{} }
func (m *StructType_Field) String() string            { return proto.CompactTextString(m) }
func (*StructType_Field) ProtoMessage()               {}
func (*StructType_Field) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{1, 0} }

func (m *StructType_Field) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *StructType_Field) GetType() *Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func init() {
	proto.RegisterType((*Type)(nil), "google.spanner.v1.Type")
	proto.RegisterType((*StructType)(nil), "google.spanner.v1.StructType")
	proto.RegisterType((*StructType_Field)(nil), "google.spanner.v1.StructType.Field")
	proto.RegisterEnum("google.spanner.v1.TypeCode", TypeCode_name, TypeCode_value)
}

func init() { proto.RegisterFile("google/spanner/v1/type.proto", fileDescriptor6) }

var fileDescriptor6 = []byte{
	// 413 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xd1, 0x8a, 0xd3, 0x40,
	0x14, 0x86, 0x9d, 0x6d, 0xda, 0x6d, 0x4e, 0x51, 0xc6, 0x81, 0xc5, 0xba, 0x2a, 0x94, 0xf5, 0xa6,
	0x28, 0x24, 0x6c, 0x15, 0x11, 0x16, 0x84, 0x34, 0x9d, 0x6a, 0x60, 0xb7, 0x09, 0xc9, 0xec, 0x45,
	0xbd, 0x30, 0x8c, 0xed, 0x18, 0x02, 0xe9, 0x4c, 0x48, 0xe2, 0x42, 0x5f, 0xc2, 0x1b, 0xdf, 0xc7,
	0x67, 0x93, 0x99, 0x64, 0x55, 0xa8, 0xca, 0xde, 0xfd, 0x33, 0xff, 0xff, 0x9d, 0x39, 0x73, 0x38,
	0xf0, 0x34, 0x53, 0x2a, 0x2b, 0x84, 0x5b, 0x97, 0x5c, 0x4a, 0x51, 0xb9, 0x37, 0xe7, 0x6e, 0xb3,
	0x2f, 0x85, 0x53, 0x56, 0xaa, 0x51, 0xe4, 0x61, 0xeb, 0x3a, 0x9d, 0xeb, 0xdc, 0x9c, 0x9f, 0xde,
	0x02, 0xbc, 0xcc, 0x5d, 0x2e, 0xa5, 0x6a, 0x78, 0x93, 0x2b, 0x59, 0xb7, 0xc0, 0xd9, 0x0f, 0x04,
	0x16, 0xdb, 0x97, 0x82, 0xb8, 0x60, 0x6d, 0xd4, 0x56, 0x8c, 0xd1, 0x04, 0x4d, 0x1f, 0xcc, 0x9e,
	0x38, 0x07, 0x85, 0x1c, 0x1d, 0xf3, 0xd5, 0x56, 0xc4, 0x26, 0x48, 0x28, 0x10, 0x5e, 0x55, 0x7c,
	0x9f, 0x8a, 0x42, 0xec, 0x84, 0x6c, 0x52, 0xdd, 0xc6, 0xf8, 0x68, 0x82, 0xa6, 0xa3, 0xd9, 0xa3,
	0x7f, 0xe0, 0x31, 0x36, 0x08, 0x6d, 0x09, 0xf3, 0xee, 0x3b, 0x18, 0xd5, 0x4d, 0xf5, 0x75, 0xd3,
	0xf1, 0x3d, 0xc3, 0x3f, 0xfb, 0x0b, 0x9f, 0x98, 0x94, 0xa9, 0x02, 0xf5, 0x2f, 0x7d, 0xf6, 0x1d,
	0x01, 0xfc, 0xb6, 0xc8, 0x05, 0x0c, 0xbe, 0xe4, 0xa2, 0xd8, 0xd6, 0x63, 0x34, 0xe9, 0x4d, 0x47,
	0xb3, 0xe7, 0xff, 0xad, 0xe4, 0x2c, 0x75, 0x36, 0xee, 0x90, 0xd3, 0x0f, 0xd0, 0x37, 0x17, 0x84,
	0x80, 0x25, 0xf9, 0xae, 0x1d, 0x86, 0x1d, 0x1b, 0x4d, 0x5e, 0x82, 0x75, 0x97, 0x1f, 0x9a, 0xd0,
	0x8b, 0x6f, 0x08, 0x86, 0xb7, 0xf3, 0x22, 0x8f, 0xe1, 0x84, 0xad, 0x23, 0x9a, 0xfa, 0xe1, 0x82,
	0xa6, 0xd7, 0xab, 0x24, 0xa2, 0x7e, 0xb0, 0x0c, 0xe8, 0x02, 0xdf, 0x23, 0x43, 0xb0, 0xe6, 0x61,
	0x78, 0x89, 0x11, 0xb1, 0xa1, 0x1f, 0xac, 0xd8, 0x9b, 0xd7, 0xf8, 0x88, 0x8c, 0xe0, 0x78, 0x79,
	0x19, 0x7a, 0xfa, 0xd0, 0x23, 0xf7, 0xc1, 0x66, 0xc1, 0x15, 0x4d, 0x98, 0x77, 0x15, 0x61, 0x4b,
	0x03, 0x0b, 0x8f, 0x51, 0xdc, 0x27, 0x00, 0x83, 0x84, 0xc5, 0xc1, 0xea, 0x3d, 0x1e, 0x68, 0x78,
	0xbe, 0x66, 0x34, 0xc1, 0xc7, 0x5a, 0x7a, 0x71, 0xec, 0xad, 0xf1, 0xb0, 0x4b, 0x5c, 0xfb, 0x0c,
	0xdb, 0xf3, 0x4f, 0x70, 0xb2, 0x51, 0xbb, 0xc3, 0xa6, 0xe7, 0xb6, 0x6e, 0x33, 0xd2, 0xbb, 0x10,
	0xa1, 0x8f, 0x6f, 0x3b, 0x3f, 0x53, 0x05, 0x97, 0x99, 0xa3, 0xaa, 0xcc, 0xcd, 0x84, 0x34, 0x9b,
	0xe2, 0xb6, 0x16, 0x2f, 0xf3, 0xfa, 0x8f, 0xdd, 0xbb, 0xe8, 0xe4, 0xe7, 0x81, 0x09, 0xbd, 0xfa,
	0x19, 0x00, 0x00, 0xff, 0xff, 0xc9, 0x01, 0x17, 0xda, 0x9f, 0x02, 0x00, 0x00,
}
